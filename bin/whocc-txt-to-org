#! /usr/bin/env python3

import sys, os
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)
from acmacs_whocc.torg import TorgGenerator

# ----------------------------------------------------------------------

def main(args):
    source  = [line.split() for line in Path(args.input).open()]
    torg = TorgGenerator()
    torg.sera = [{"name": en} for en in source[0]]
    for row in source[1:]:
        torg.antigens.append({"name": row[0]})
        torg.titers.append(row[1:])
    Path(args.output).open("w").write(torg.make())
    print(f">>> Antigens: {len(torg.antigens)}  Sera: {len(torg.sera)}")
    
# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('input')
    parser.add_argument('output')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
