#! /usr/bin/env python3

"""
"""

import sys, os, datetime
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)
try:
    import acmacs
except:
    sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
    import acmacs

# ======================================================================

def main(args):
    if args.output_dir:
        os.makedirs(args.output_dir, exist_ok=True)
    mrg = acmacs.Chart(args.charts[0])
    relax(mrg, 0, args)
    for step, c1_name in enumerate(args.charts[1:], start=1):
        mrg_incremental, report = acmacs.merge(mrg, acmacs.Chart(c1_name), type="incremental")
        mrg_scratch = mrg_incremental.clone("plot_spec")
        relax_incremental(mrg_incremental, step, args)
        relax(mrg_scratch, step, args)
        if mrg_incremental.projection().stress() < mrg_scratch.projection().stress():
            mrg = mrg_incremental
            print(f"{step:3d}: --> incremental {mrg.projection().stress():9.4f}")
        else:
            mrg = mrg_scratch
            print(f"{step:3d}: --> scratch {mrg.projection().stress():9.4f}")

# ----------------------------------------------------------------------

def relax(chart, step, args):
    start = datetime.datetime.now()
    chart.relax(number_of_dimensions=args.number_of_dimensions, number_of_optimizations=args.number_of_optimizations, minimum_column_basis=args.minimum_column_basis)
    print(f"{step:3d}:s: {chart.projection().stress():9.4f}  {chart.make_name():70s} [{datetime.datetime.now() - start}]")
    if args.output_dir:
        chart.export(os.path.join(args.output_dir, f"{step:03d}.s.ace"), sys.argv[0])

# ----------------------------------------------------------------------

def relax_incremental(chart, step, args):
    start = datetime.datetime.now()
    chart.relax_incremental(number_of_optimizations=args.number_of_optimizations)
    print(f"{step:3d}:i: {chart.projection().stress():9.4f}  {chart.make_name():70s} [{datetime.datetime.now() - start}]")
    if args.output_dir:
        chart.export(os.path.join(args.output_dir, f"{step:03d}.i.ace"), sys.argv[0])

# ----------------------------------------------------------------------

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-n', dest="number_of_optimizations", type=int, default=100)
    parser.add_argument('-d', dest="number_of_dimensions", type=int, default=2)
    parser.add_argument('-m', dest="minimum_column_basis", default="none")
    parser.add_argument('-o', dest="output_dir", default=None)
    parser.add_argument("charts", nargs="+")

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)


# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
