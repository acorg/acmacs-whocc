#! /usr/bin/env python3
# -*- Python -*-
# ======================================================================

import sys, os, socket, json, datetime, shutil, subprocess, pprint
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

ADMIN_EMAIL = "eu@antigenic-cartography.org"
ROOT_DIR = None
STATE_FILE = None
SUBTYPE = None
DATEFMT = "%Y-%m-%d %H:%M:%S"
STATE = None
EMACS_PREFIX = f"/scp:{socket.gethostname()}:"

class Error (Exception): pass

# States:
# "export_sequences"
# "tree_init"
# "tree_update_config"
# "tree_wait"

# ======================================================================

def main(args):
    if socket.gethostname() != "i19":
        raise Error("The script must be run on i19")
    if not os.getenv("ACMACSD_ROOT") or not Path(os.getenv("ACMACSD_ROOT"), "data", "hidb5.h1.json.xz") or not Path(args.seqdb).expanduser().exists():
        raise Error("ACMACSD_ROOT not set or no hidb in $ACMACSD_ROOT/data")
    sys.path[1:1] = [os.getenv("ACMACSD_ROOT") + "/py"]
    global ROOT_DIR, STATE_FILE, SUBTYPE
    SUBTYPE = args.subtype.lower()
    if SUBTYPE not in ["h1", "h3", "bv", "by"]:
        raise Error(f"Invalid subtype: {SUBTYPE}")
    ROOT_DIR = Path("/syn/eu/ac/results/signature-pages", args.tag, SUBTYPE).expanduser().resolve()
    print(f"{ROOT_DIR}")
    if args.daemon:
        fork()
    STATE_FILE = ROOT_DIR.joinpath("state.json")
    if not ROOT_DIR.exists() or not STATE_FILE.exists():
        initialize(args)
    setup_logging()
    run()

# ----------------------------------------------------------------------

def run():
    global STATE
    STATE = load_state()
    STATE.pop("error", None)
    while STATE["state"] != "completed":
        current_state = STATE["state"]
        globals()["state_" + current_state]()
        save_state(STATE)
        if current_state == STATE["state"]:
            raise Error(f"state not changed from {current_state}")
    email_success()

# ======================================================================

def state_export_sequences():
    output_fas = ROOT_DIR.joinpath("source.fas")
    log_file = ROOT_DIR.joinpath("seqdb-export.log")
    cmd = [
        os.path.expandvars("${ACMACSD_ROOT}/bin/seqdb-export"),
        "--db", seqdb_file(),
        "--flu", SUBTYPE,
        "--recent", STATE["config"]["sequences"]["recent"],
        "--hamming-distance-threshold", STATE["config"]["sequences"]["hamming_distance_threshold"],
        "--tree-maker",
        "--base-seq", STATE["config"]["sequences"]["base"],
        output_fas
    ]
    module_logger.info(f"exporting fasta: {output_fas}\n  {cmd}\n  log: {log_file}")
    subprocess.check_call([str(field) for field in cmd], stdout=log_file.open("w"), stderr=subprocess.STDOUT)
    STATE["source_fasta"] = str(output_fas)
    STATE["state"] = "tree_init"

# ----------------------------------------------------------------------

def state_tree_init():
    from tree_maker import config as config_m
    module_logger.info(f"initializing tree maker config")
    config = config_m.get_default_config()
    config.update(STATE["config"]["tree_maker"][STATE["tree_maker"]])
    config["source"] = str(Path(STATE["source_fasta"]).resolve())
    STATE["tree_config"] = config
    STATE["state"] = "tree_wait"

# ----------------------------------------------------------------------

def state_tree_wait():
    from tree_maker import maker as maker_m
    if not STATE.get("tree_state"):
        STATE["tree_state"] = {"state": "init", "working_dir": str(ROOT_DIR)}
    module_logger.info(f"creating tree maker runner")
    runner = maker_m.create_runner(config=STATE["tree_config"], state=STATE["tree_state"])
    while STATE["tree_state"] != "completed":
        runner.step()
        module_logger.info(f"making tree: {STATE['tree_state']['state']}")
        save_state(STATE)
    STATE["state"] = "draw_trees"

# ----------------------------------------------------------------------

def state_draw_trees():
    tree_file = ROOT_DIR.joinpath("tree.json.xz")
    settings_file = ROOT_DIR.joinpath("tree.settings.json")
    settings_no_aa_file = ROOT_DIR.joinpath("tree.settings-no-aa.json")
    pdfs = [ROOT_DIR.joinpath("aa-at-pos.pdf"), ROOT_DIR.joinpath("all-hz-sections.pdf"), ROOT_DIR.joinpath("tree.pdf"), ROOT_DIR.joinpath("no-aa.pdf")]
    
# ======================================================================

def fork():
    if os.fork() == 0:
        # child
        os.setsid()
        sys.stdin.close()
        sys.stdout.close()
        sys.stderr.close()
        os.close(0)
        os.close(1)
        os.close(2)
    else:
        # parent
        exit(0)

# ----------------------------------------------------------------------

def initialize(args):
    ROOT_DIR.mkdir(parents=True, exist_ok=True)
    if args.seqdb:
        shutil.copyfile(str(Path(args.seqdb).expanduser()), str(seqdb_file()))
    config = json.load(Path(os.getenv("ACMACSD_ROOT"), "sources", "acmacs-whocc", "conf", "make-signature-pages.config.json").open("r"))
    state = {"state": "export_sequences", "start": datetime.datetime.now().strftime(DATEFMT), "tree_maker": args.tree_maker_speed, "subtype": SUBTYPE, "config": config[SUBTYPE]}
    save_state(state)

# ----------------------------------------------------------------------

def email_error(err):
    from acmacs_base.email import send
    subject = f"FAILED: {socket.gethostname()} {sys.argv}"
    send(to=ADMIN_EMAIL, subject=subject, body=f"{subject}\n{EMACS_PREFIX}{ROOT_DIR}\n\n{err}")

def email_success():
    from acmacs_base.email import send
    subject = f"completed: {socket.gethostname()} {sys.argv}"
    send(to=ADMIN_EMAIL, subject=subject, body=f"{subject}\n{EMACS_PREFIX}{ROOT_DIR}")

# ----------------------------------------------------------------------

def setup_logging():
    logging.basicConfig(filename=ROOT_DIR.joinpath("log.log"), level=logging.DEBUG, format="%(levelname)s %(asctime)s: %(message)s", datefmt=DATEFMT)

def save_state(state):
    from acmacs_base import json
    try:
        json.write_json(path=STATE_FILE, data=state, indent=2, compact=True)
    except TypeError:
        module_logger.debug(f"STATE\n{pprint.pformat(state)}")
        raise

def load_state():
    return json.load(STATE_FILE.open("r"))

def seqdb_file():
    return ROOT_DIR.joinpath("seqdb.json.xz")

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    # parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
    parser.add_argument('-t', '--tag', action='store', dest='tag', required=True)
    parser.add_argument('-f', '--flu', action='store', dest='subtype', required=True)
    parser.add_argument('--seqdb', action='store', dest='seqdb', default="~/AD/data/seqdb.json.xz", help="use the specified seqdb instead of making a new one")
    parser.add_argument('-s', '--tree-maker-speed', action='store', dest='tree_maker_speed', default="week", help="\"week\", \"day\" or see ../conf/make-signature-pages.config.json")
    parser.add_argument('--no-daemon', action='store_false', dest='daemon', default=True)

    args = parser.parse_args()
    exit_code = main(args)
except Error as err:
    logging.error(str(err))
    email_error(f"{err}\n{traceback.format_exc()}")
    STATE["error"] = str(err)
    save_state(STATE)
    exit_code = 2
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    email_error(f"{err}\n{traceback.format_exc()}")
    STATE["error"] = str(err)
    save_state(STATE)
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
