#! /usr/bin/env python3
# -*- Python -*-
# ======================================================================

import sys, os, socket, json, datetime #, subprocess, time, shutil, pprint
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

ADMIN_EMAIL = "eu@antigenic-cartography.org"
ROOT_DIR = None
STATE_FILE = None
SUBTYPE = None
DATEFMT = "%Y-%m-%d %H:%M:%S"
STATE = None

# States:
# "export_sequences"
# "make_trees_init"

# ======================================================================

def main(args):
    if socket.gethostname() != "i19":
        raise RuntimeError("The script must be run on i19")
    if not os.getenv("ACMACSD_ROOT") or not Path(os.getenv("ACMACSD_ROOT"), "data", "hidb5.h1.json.xz") or not Path(args.seqdb).exists():
        raise RuntimeError("ACMACSD_ROOT not set or no hidb in $ACMACSD_ROOT/data")
    global ROOT_DIR, STATE_FILE, SUBTYPE
    SUBTYPE = args.subtype.lower()
    if SUBTYPE not in ["h1", "h3", "bv", "by"]:
        raise RuntimeError(f"Invalid subtype: {SUBTYPE}")
    ROOT_DIR = Path("/syn/eu/ac/results/signature-pages", args.tag, SUBTYPE)
    STATE_FILE = ROOT_DIR.joinpath("state.json")
    if not ROOT_DIR.exists() or not STATE_FILE.exists():
        initialize(args)
    setup_logging()
    run()

# ----------------------------------------------------------------------

def run():
    global STATE
    STATE = load_state()
    STATE.pop("error", None)
    while state["state"] != "completed":
        current_state = STATE["state"]
        globals()["state_" + current_state]()
        save_state(STATE)
        if current_state == STATE["state"]:
            raise RuntimeError(f"state not changed from {current_state}")
    email_success()

# ======================================================================

def state_export_sequences():
    output_fas = ROOT_DIR.joinpath("source.fas")
    log_file = ROOT_DIR.joinpath("seqdb-export.log")
    cmd = [
        os.path.expandvars("${ACMACSD_ROOT}/bin/seqdb-export"),
        "--db", seqdb_file(),
        "--flu", SUBTYPE,
        "--recent", STATE["config"]["sequences"]["recent"],
        "--hamming-distance-threshold", STATE["config"]["sequences"]["hamming_distance_threshold"],
        "--tree-maker",
        "--base-seq", STATE["config"]["sequences"]["base"],
        output_fas
    ]
    module_logger.info(f"exporting fasta: {output_fas}")
    module_logger.info(f"running: {cmd}")
    module_logger.info(f"log: {log_file}")
    subprocess.check_call([str(field) for field in cmd], stdout=log_file.open("w"), stderr=subprocess.STDOUT)
    STATE["state"] = "make_trees_init"

# ----------------------------------------------------------------------

# ----------------------------------------------------------------------

# ======================================================================

def initialize(args):
    ROOT_DIR.mkdir(parents=True, exist_ok=True)
    ROOT_DIR.joinpath("log").mkdir()
    if args.seqdb:
        shutil.copyfile(str(Path(args.seqdb).expanduser()), str(seqdb_file()))
    config = json.load(Path(os.getenv("ACMACSD_ROOT"), "sources", "acmacs-whocc", "conf", "make-signature-pages.config.json").open("r"))
    state = {"state": "export_sequences", "start": datetime.datetime.now().strftime(DATEFMT), "tree_maker": args.tree_maker_speed, "subtype": SUBTYPE, "config": config[SUBTYPE]}
    save_state(state)

# ----------------------------------------------------------------------

def email_error(err):
    from acmacs_base.email import send
    subject = f"FAILED: {socket.gethostname()} {sys.argv}"
    send(to=ADMIN_EMAIL, subject=subject, body=f"{subject}\n/scp:i19:{ROOT_DIR}\n\n{err}")

def email_success():
    from acmacs_base.email import send
    subject = f"completed: {socket.gethostname()} {sys.argv}"
    send(to=ADMIN_EMAIL, subject=subject, body=f"{subject}\n/scp:i19:{ROOT_DIR}")

# ----------------------------------------------------------------------

def setup_logging():
    logging.basicConfig(filename=ROOT_DIR.joinpath("log.log"), level=logging.DEBUG, format="%(levelname)s %(asctime)s: %(message)s", datefmt=DATEFMT)

def save_state(state):
    json.dump(state, STATE_FILE.open("w"), indent=2)

def load_state():
    return json.load(STATE_FILE.open("r"))

def seqdb_file():
    return ROOT_DIR.joinpath("seqdb.json.xz")

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    # parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
    parser.add_argument('-t', '--tag', action='store', dest='tag', required=True)
    parser.add_argument('-f', '--flu', action='store', dest='subtype', required=True)
    parser.add_argument('--seqdb', action='store', dest='seqdb', default="~/AD/data/seqdb.json.xz", help="use the specified seqdb instead of making a new one")
    parser.add_argument('-s', '--tree-maker-speed', action='store', dest='tree_maker_speed', default="week", help="\"week\", \"day\" or see ../conf/make-signature-pages.config.json")

    args = parser.parse_args()
    exit_code = main(args)
except Error as err:
    logging.error(str(err))
    email_error(err)
    STATE["error"] = str(err)
    save_state(STATE)
    exit_code = 2
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    email_error(err)
    STATE["error"] = str(err)
    save_state(STATE)
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
