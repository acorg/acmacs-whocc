#! /usr/bin/env python3
# -*- Python -*-
# ======================================================================

import sys, os, json, socket, subprocess
from pathlib import Path
# sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

ROOT_DIR = None

def main(args):
    # if socket.gethostname() != "i19":
    #     raise RuntimeError("The script must be run on i19")
    if not os.getenv("ACMACSD_ROOT") or not Path(os.getenv("ACMACSD_ROOT"), "data", "hidb5.h1.json.xz"):
        raise RuntimeError("ACMACSD_ROOT not set or no hidb in $ACMACSD_ROOT/data")
    global ROOT_DIR, STATE_FILE
    ROOT_DIR = Path("/syn/eu/ac/results/whocc-tree", args.tag)
    STATE_FILE = ROOT_DIR.joinpath("state.json")
    if not ROOT_DIR.exists():
        initialize()
    run()

# ----------------------------------------------------------------------

def initialize():
    ROOT_DIR.mkdir(parents=True)
    ROOT_DIR.joinpath("log").mkdir()
    state = {"state": "init", "subtypes": ["H1", "H3", "BV", "BY"]}
    save_state(state)

# ----------------------------------------------------------------------

def run():
    state = load_state()
    while True:
        globals()["state_" + state["state"]](state)
        save_state(state)

# ----------------------------------------------------------------------

def state_init(state):
    if not ROOT_DIR.joinpath("seqdb.json.xz").exists():
        state["state"] = "make_seqdb"
    else:
        raise NotImplementedError()

# ----------------------------------------------------------------------

def state_make_seqdb(state):
    module_logger.info("making seqdb (~5min)")
    subprocess.check_call([os.path.expandvars("${ACMACSD_ROOT}/bin/seqdb-create"), "--db", str(ROOT_DIR.joinpath("seqdb.json.xz")), "--match-hidb", "--clades", os.path.expandvars("${HOME}/ac/tables-store/sequences/*.fas.bz2")], stdout=ROOT_DIR.joinpath("log", "seqdb-create.log").open("w"), stderr=subprocess.STDOUT)
    state["state"] = "export_sequences"

# ----------------------------------------------------------------------

def state_export_sequences(state):
    log = ROOT_DIR.joinpath("log", "seqdb-export.log").open("w")
    data = {
        "H1": {"flu": "h1",   "base_seq": "SWITZERLAND/9772556/2013 SIAT2"},
        "H3": {"flu": "h3",   "base_seq": "HAWAII/22/2012 MDCK"},
        "BV": {"flu": "bvic", "base_seq": "VICTORIA/830/2013 MDCK2"},
        "BY": {"flu": "byam", "base_seq": "CHRISTCHURCH/503/2013 MDCK1"}
        }
    for subtype in state["subtypes"]:
        module_logger.info("exporting fasta for {}", subtype)
        subprocess.check_call([os.path.expandvars("${ACMACSD_ROOT}/bin/seqdb-export"), "--db", str(ROOT_DIR.joinpath("seqdb.json.xz")), "--flu", data[subtype]["flu"], "--recent", "4000" "--hamming-distance-threshold", "160", "--tree-maker", "--base-seq", data[subtype]["base_seq"], str(ROOT_DIR.joinpath(subtype + ".fas"))], stdout=log, stderr=subprocess.STDOUT)
    state["state"] = "make_trees_start"

# ----------------------------------------------------------------------

def state_make_trees_start(state):
    raise NotImplementedError()

# ----------------------------------------------------------------------

def state_fail(state):
    raise NotImplementedError("state fail")

# ----------------------------------------------------------------------

def save_state(state):
    json.dump(state, STATE_FILE.open("w"), indent=2)

def load_state():
    return json.load(STATE_FILE.open("r"))

# ----------------------------------------------------------------------

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
    parser.add_argument('-t', '--tag', action='store', dest='tag', required=True)

    args = parser.parse_args()
    if args.verbose:
        args.loglevel = logging.DEBUG
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)


# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
