#! /usr/bin/env python3
# -*- Python -*-

"""
Converts xlsx to torg, waits for torg editing, converts it to ace
"""

import sys, os, pprint, subprocess, re, shutil, time, signal, datetime, collections
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

class Error (Exception): pass

# ======================================================================

def main(args):
    names = subprocess.check_output(["whocc-xlsx-to-torg", "-n", args.source[0]]).decode("utf-8").strip().split("\n")
    output_dirs = frozenset(detect_dir(name) for name in names)
    if len(output_dirs) != 1:
        raise RuntimeError(f"None or multiple output dirs {output_dirs} inferred from {name}")
    output_dir = next(iter(output_dirs))
    if not args.overwrite:
        check_output_names(names, output_dir=output_dir)
    copy_xlsx(args.source[0], output_dir.joinpath(make_xlsx_name(names)))
    subprocess.check_call(["whocc-xlsx-to-torg", "-o", output_dir, args.source[0]])
    if len(names) == 1:
        edit_torg_make_ace(names[0], output_dir=output_dir, stop_on_torg=args.stop_on_torg)
    elif not args.stop_on_torg:
        make_all_ace(names, output_dir=output_dir)

# ----------------------------------------------------------------------

def detect_dir(name):
    subtype, lab, assay, date = name.split("-")
    try:
        dir = Path("~/ac/tables-store").expanduser()
        if subtype in ["b", "bvic", "byam"]:
            dir = dir.joinpath("B")
        elif subtype == "h1":
            dir = dir.joinpath("H1PDM")
        elif subtype == "h3":
            dir = dir.joinpath("H3")
        else:
            raise Error(f"unknown subtype {subtype}")
        if lab == "crick":
            lab_dir = "NIMR"
        elif lab == "vidrl":
            lab_dir = "MELB"
        else:
            lab_dir = lab.upper()
        dir = dir.joinpath(lab_dir)
        if lab == "vidrl":
            if subtype == "bvic":
                dir  = dir.joinpath("victoria")
            elif subtype == "byam":
                dir  = dir.joinpath("yamagata")
    except Exception as err:
        dir = Path("/d")
        module_logger.warning(f"cannot infer target dir, \"{dir}\" is used: {err}")
    return dir

# ----------------------------------------------------------------------

def make_xlsx_name(names):
    if len(names) == 1:
        return f"{next(iter(names))}.xlsx"
    else:
        names_sorted = sorted(names)
        return f"{names_sorted[0]}-{names_sorted[-1].split('-')[-1]}.xlsx"

# ----------------------------------------------------------------------

def check_output_names(names, output_dir):
    num_exist = 0
    def check(name):
        nonlocal num_exist
        path = output_dir.joinpath(name)
        if path.exists():
            num_exist += 1
            return f"*** {path}"
        else:
            return f"    {path}"

    files = [make_xlsx_name(names)] + [f"{nn}.torg" for nn in names] + [f"{nn}.ace" for nn in names]
    if "h3-crick-neut-" in names[0]:
        files += [f"{nn}.prn-read.ace" for nn in names]
    msg = "\n".join(check(nam) for nam in files)
    if num_exist:
        raise Error(f"{num_exist} file(s) marked with *** already exist(s) (use -f to overwrite):\n{msg}")

# ----------------------------------------------------------------------

def copy_xlsx(source, xlsx_name):
    module_logger.info(f"{source} -> {xlsx_name}")
    shutil.copyfile(source, xlsx_name)

# ----------------------------------------------------------------------

def edit_torg_make_ace(name, output_dir, stop_on_torg):
    torg_filename = output_dir.joinpath(names[0] + ".torg")
    ace_filename = output_dir.joinpath(names[0] + ".ace")
    # subprocess.check_call(["emacsclient", "-q", "-e", f"(progn (find-file \"{torg_filename}\") (forward-line 10) (org-cycle) (forward-line 0) (save-buffer))"])
    subprocess.check_call(["emacsclient", "-q", "-e", f"(progn (find-file \"{torg_filename}\") (forward-line 10))"])
    if args.stop_on_torg:
        return
    signal.signal(signal.SIGHUP, sig_handler)
    while True:
        try:
            time.sleep(60 * 60)
        except KeyboardInterrupt:
            break
        except Exception as err:
            # print(err)
            pass
        make_ace(torg_filename, ace_filename)

# ----------------------------------------------------------------------

def make_all_ace(names, output_dir):
    for name in names:
        source = output_dir.joinpath(name + ".torg")
        ace_prn_read = None
        if is_chart_prn_with_read_titers(source):
            ace_prn_read = output_dir.joinpath(name + ".prn-read.ace")
        make_ace(source, output_dir.joinpath(name + ".ace"), ace_prn_read)

# ----------------------------------------------------------------------

sRePrnRead = re.compile(r"(\s+\|\s+\d+\s+/\s+\d+\s+\|)")

def is_chart_prn_with_read_titers(source):
    assay_prn = False
    for line in open(source):
        if line:
            if line.startswith("- Assay: PRN"):
                assay_prn = True
            elif assay_prn and line[0] == '|' and sRePrnRead.search(line):
                # module_logger.warning(f"\"{sRePrnRead.search(line)!r}\" {line}")
                return True
    return False

# ----------------------------------------------------------------------

def make_ace(source, ace, ace_prn_read):
    print(f"\n{'=' * 150}\n{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n{source}\n{ace}\n{ace_prn_read or ''}\n\n")
    subprocess.run(f"chart-org-table-to-ace '{source}' '{ace}' && chart-fix-names-passages '{ace}' '{ace}' && chart-table '{ace}'", shell=True)
    if ace_prn_read:
        print("\n\n")
        subprocess.run(f"chart-org-table-to-ace --prn-read '{source}' '{ace_prn_read}' && chart-fix-names-passages '{ace_prn_read}' '{ace_prn_read}' && chart-table '{ace_prn_read}'", shell=True)

# ----------------------------------------------------------------------

def sig_handler(signo, stack):
    raise RuntimeError(f"SIG {signo}")

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-t', action='store_true', dest='stop_on_torg', default=False, help='Stop after generating torg file.')
    parser.add_argument('-f', action='store_true', dest='overwrite', default=False, help='overwrite exiting output files.')

    parser.add_argument("source", nargs=1)

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Error as err:
    logging.error(str(err))
    exit_code = 1
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
