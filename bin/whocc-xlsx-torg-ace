#! /usr/bin/env python3
# -*- Python -*-

"""
Converts xlsx to torg, waits for torg editing, converts it to ace
"""

import sys, os, pprint, subprocess, re, shutil, time, signal, datetime, collections
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

try:
    from xlsx2csv import Xlsx2csv
except:
    print("pip3 install xlsx2csv\nhttps://github.com/dilshod/xlsx2csv", file=sys.stderr)
    exit(1)

# ======================================================================

def main(args):
    writer = read_xlsx(args.source[0])
    writer.process()
    target_dir = writer.target_dir()
    target_prefix = writer.target_prefix()
    # if target_dir.joinpath(target_prefix + ".xlsx").exists() or target_dir.joinpath(target_prefix + ".xls").exists() or target_dir.joinpath(target_prefix + ".torg").exists() or target_dir.joinpath(target_prefix + ".ace").exists():
    #     subprocess.check_call(f"ls -l {target_dir.joinpath(target_prefix)}*", shell=True)
    #     raise RuntimeError("target already exists")
    shutil.copyfile(args.source[0], target_dir.joinpath(target_prefix + ".xlsx"))
    torg_filename = target_dir.joinpath(target_prefix + ".torg")
    with torg_filename.open("w") as torg:
        writer.generate_header(torg)
        writer.generate_body(torg)
    print("target:", target_dir, target_prefix)
    # subprocess.check_call(["emacsclient", "-n", str(torg_filename)])
    subprocess.check_call(["emacsclient", "-e", f"(progn (find-file \"{torg_filename}\") (forward-line 10) (org-cycle) (save-buffer))"])
    if args.stop_on_torg:
        return
    # writer.generate_header()
    # pprint.pprint(writer.rows, width=200)
    signal.signal(signal.SIGHUP, sig_handler)
    while True:
        # print("wating for SIGHUP")
        try:
            time.sleep(60 * 60)
        except KeyboardInterrupt:
            break
        except Exception as err:
            # print(err)
            pass
        make_ace(torg_filename, target_dir.joinpath(target_prefix + ".ace"))

# ----------------------------------------------------------------------

def make_ace(source, target):
    print(f"\n{'=' * 150}\n{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n{source}\n{target}\n\n")
    subprocess.run(f"chart-org-table-to-ace '{source}' '{target}' && chart-fix-names-passages '{target}' '{target}' && chart-table '{target}'", shell=True)

def sig_handler(signo, stack):
    raise RuntimeError(f"SIG {signo}")

# ======================================================================

class TorgWriter:

    class Error (RuntimeError): pass

    field_delimiter = "\x01"

    def __init__(self):
        self.rows = []
        self.lab = None
        self.date = None
        self.subtype = None
        self.lineage = None
        self.assay = None
        self.rbc = None
        self.tested_by = ""
        self.name_columns = collections.Counter()
        self.name_rows = collections.Counter()
        self.passage_columns = collections.Counter()
        self.passage_rows = collections.Counter()
        self.antigen_date_columns = collections.Counter()
        self.serum_id_rows = collections.Counter()
        self.lab_id_columns = collections.Counter()
        self.clade_rows = collections.Counter()
        self.clade_columns = collections.Counter()
        
    def write(self, row):
        self.rows.append([field.strip() for field in row.split(self.field_delimiter)])

    def process(self):
        for row_no, row in enumerate(self.rows):
            for col_no, cell in enumerate(row):
                self.get_lab(cell)
                self.get_date(cell)
                self.get_rbc(cell)
                self.get_subtype_lineage(cell, row_no, col_no)
                self.get_tested_by(cell)
                self.get_field_type(cell, row_no, col_no)
        self.fix_dates()
        self.update_each_cell(self.fix_lab_id)
        self.update_each_cell(self.remove_redundant_data)
        if self.lab in ["MELB", "VIDRL"]:
            self.post_process_MELB()

    def target_dir(self):
        try:
            dir = Path("~/ac/tables-store").expanduser()
            if self.subtype == "B":
                dir = dir.joinpath("B")
            elif self.subtype == "A(H1N1)":
                dir = dir.joinpath("H1PDM")
            elif self.subtype == "A(H3N2)":
                dir = dir.joinpath("H3")
            else:
                raise Error(f"unknown subtype {self.subtype}")
            dir = dir.joinpath(self.lab)
            if self.subtype == "B" and self.lab == "MELB":
                dir  = dir.joinpath(self.lineage.lower())
        except Error as err:
            dir = "/d"
            module_logger.warning(f"cannot infer target dir, \"{dir}\" is used: {err}")
        return dir

    def target_prefix(self):
        try:
            if self.subtype == "B":
                prefix = f"b-{self.lab.lower()}-{self.rbc.lower()}-{self.date.replace('-', '')}"
                if self.lineage == "YAMAGATA":
                    prefix += "_002"
            elif self.subtype == "A(H1N1)":
                prefix = f"a-h1n1-{self.lab.lower()}-{self.rbc.lower()}-{self.date.replace('-', '')}"
            elif self.subtype == "A(H3N2)":
                if self.rbc:
                    prefix = f"a-h3n2-{self.lab.lower()}-{self.rbc.lower()}-{self.date.replace('-', '')}"
                else:
                    prefix = f"a-h3n2-{self.lab.lower()}-{self.assay.lower()}-{self.date.replace('-', '')}"
            else:
                raise Error(f"unknown subtype {self.subtype}")
        except Error as err:
            prefix = "/d"
            module_logger.warning(f"cannot infer target prefix, \"{prefix}\" is used: {err}")
        return prefix

    def generate_header(self, fd = sys.stdout):
        fd.write("# -*- Torg -*-\n\n")
        fd.write(f"- Lab: {self.lab}\n- Date: {self.date}\n- Subtype: {self.subtype}\n- Assay: {self.assay}\n")
        if self.lineage:
            fd.write(f"- Lineage: {self.lineage}\n")
        if self.rbc:
            fd.write(f"- RBC: {self.rbc}\n")
        fd.write(f"Tested by: {self.tested_by}\n\n")

    def generate_body(self, fd = sys.stdout):
        name_column = self.name_columns and (self.name_columns.most_common(1)[0][0] + 1)
        date_column = self.antigen_date_columns and (self.antigen_date_columns.most_common(1)[0][0] + 1)
        passage_column = self.passage_columns and (self.passage_columns.most_common(1)[0][0] + 1)
        lab_id_column = self.lab_id_columns and (self.lab_id_columns.most_common(1)[0][0] + 1)
        clade_column = self.clade_columns and (self.clade_columns.most_common(1)[0][0] + 1)
        fd.write("| ")
        for col_no in range(len(self.rows[0])):
            if name_column == col_no:
                fd.write("name |")
            elif date_column == col_no:
                fd.write("date |")
            elif passage_column == col_no:
                fd.write("passage |")
            elif lab_id_column == col_no:
                fd.write("lab_id |")
            elif clade_column == col_no:
                fd.write("#clade |")
            else:
                fd.write("  |")
        fd.write("\n")

        name_row = self.name_rows and self.name_rows.most_common(1)[0][0]
        passage_row = self.passage_rows and self.passage_rows.most_common(1)[0][0]
        serum_id_row = self.serum_id_rows and self.serum_id_rows.most_common(1)[0][0]
        clade_row = self.clade_rows and self.clade_rows.most_common(1)[0][0]
        for row_no, row in enumerate(self.rows):
            if row_no == name_row:
                fd.write("| name ")
            elif row_no == passage_row:
                fd.write("| passage ")
            elif row_no == serum_id_row:
                fd.write("| serum_id ")
            elif row_no == clade_row:
                fd.write("| #clade ")
            else:
                fd.write("|  ")

            fd.write("| ")
            fd.write(" | ".join(row))
            fd.write(" |\n")

    def get_lab(self, cell):
        if not self.lab:
            if re.match(r"Reference\s+Antisera", cell, flags=re.I):
                self.lab = "MELB"
            elif re.match(r"Reference\s+Viruses", cell, flags=re.I):
                self.lab = "CDC"

    def get_date(self, cell):
        if not self.date:
            m = re.match(r"^(?:Test\s+Date|Date\s+Tested)\s*:?\s+([0-9\-/]+)$", cell, flags=re.I)
            if m:
                self.date = m.group(1) # convert later, when lab is clarified

    def get_rbc(self, cell):
        if not self.rbc:
            m = re.match(r"^RBC\s+Type\s*:?\s+(.+)$", cell, flags=re.I)
            if m:
                self.rbc = m.group(1).lower()

    def get_subtype_lineage(self, cell, row_no, col_no):
        m = re.match(r"^([AB])/([^/]+)/0*([^/]+)/(\d+)$", cell, flags=re.I)
        if m:
            self.name_columns.update({col_no: 1})
            self.name_rows.update({row_no: 1})
            type, location, isolation, year = (gr.upper() for gr in m.groups())
            name = f"{location}/{isolation}/{year}"
            if type == "B":
                if not self.subtype:
                    self.subtype = "B"
                    self.assay = "HI"
                if not self.lineage:
                    if name in ["BRISBANE/60/2008", "MARYLAND/15/2016", "COLORADO/6/2017", "WASHINGTON/2/2019"]:
                        self.lineage = "VICTORIA"
                    elif name in ["MASSACHUSETTS/2/2012", "PHUKET/3073/2013"]:
                        self.lineage = "YAMAGATA"
            elif type == "A":
                if not self.subtype:
                    if name in ["CALIFORNIA/7/2009", "MICHIGAN/45/2015", "BRISBANE/2/2018", "HAWAII/70/2019"] or "/SWL" in name:
                        self.subtype = "A(H1N1)"
                        self.assay = "HI"
                    elif name in ["HONG KONG/45/2019", "HONG KONG/2671/2019", "IOWA/60/2018", "SOUTH AUSTRALIA/34/2019", "KANSAS/14/2017"]:
                        self.subtype = "A(H3N2)"

    def get_tested_by(self, cell):
        if not self.tested_by:
            m = re.match(r"^Tested\s+By\s*:?\s*(.+)$", cell, flags=re.I)
            if m:
                self.tested_by = m.group(1)

    def fix_dates(self):
        if self.lab in ["CDC"]:
            fix_date = self.fix_date_USA
        elif self.lab in ["MELB", "NIID", "NIMR", "VIDRL", "CRICK"]:
            fix_date = self.fix_date_Europe
        else:
            module_logger.warning(f"Lab was not inferred, cannot fix dates")
            fix_date = None
        if fix_date:
            self.date = fix_date(self.date)
            self.update_each_cell(fix_date)

    def fix_date_USA(self, date, row_no=None, col=None):
        m = re.match(r"^([0-3][0-9])/([01][0-9])/((?:19|20)[0-9][0-9])$", date)
        if m:
            date = f"{m.group(3)}-{m.group(1)}-{m.group(2)}"
        return date

    def fix_date_Europe(self, date, row_no=None, col=None):
        m = re.match(r"^([0-3][0-9])/([01][0-9])/((?:19|20)[0-9][0-9])$", date)
        if m:
            date = f"{m.group(3)}-{m.group(2)}-{m.group(1)}"
        return date

    def update_each_cell(self, func):
        for row_no, row in enumerate(self.rows):
            for col in range(len(row)):
                row[col] = func(row[col], row_no, col)

    def remove_redundant_data(self, cell, row_no, col_no):
        m = re.match(r"^(Reference Antisera|Test Method: Manual|Details|Sample|ID\s*#|Passage|Date)$", cell, flags=re.I)
        if m:
            cell = ""
        if cell.lower() == "clade>":
            self.clade_columns.update({col_no: 1})
            self.clade_rows.update({row_no: 1})
            cell = ""
        return cell

    def fix_lab_id(self, cell, row_no, col_no):
        if self.lab in ["MELB", "VIDRL"]:
            if re.match(r"^VW\d+$", cell, flags=re.I):
                self.lab_id_columns.update({col_no: 1})
                return f"MELB#{cell}"
        return cell

    def get_field_type(self, cell, row_no, col_no):
        if re.match(r"^[0-3][0-9]/[01][0-9]/(?:19|20)?[0-9][0-9]$", cell):
            self.antigen_date_columns.update({col_no: 1})
        elif re.search(r"(MDCK|SIAT|HCK|E)", cell, flags=re.I):
            self.passage_columns.update({col_no: 1})
            self.passage_rows.update({row_no: 1})
        elif self.lab == "MELB" and re.match(r"^[AF]\d{3,}(-\d+D)?$", cell, flags=re.I):
            self.serum_id_rows.update({row_no: 1})
        elif self.lab == "MELB" and re.match(r"^[A-Z]{2,}\d+$", cell, flags=re.I):
            self.name_rows.update({row_no: 1})

    # ----------------------------------------------------------------------

    def post_process_MELB(self):
        print("MELB")
        # print("name_columns: ", self.name_columns.most_common(1), self.name_columns)
        # print("name_rows: ", self.name_rows.most_common(1), self.name_rows)
        # print("antigen_date_columns: ", self.antigen_date_columns.most_common(1), self.antigen_date_columns)
        # print("passage_columns: ", self.passage_columns.most_common(1), self.passage_columns)

# ======================================================================

def read_xlsx(source):
    import csv
    kwargs = {
        'dateformat': "%Y-%m-%d",
        'delimiter': TorgWriter.field_delimiter,
        'escape_strings': False,
        'exclude_hidden_sheets': True,
        'exclude_sheet_pattern': '',
        'floatformat': None,
        'hyperlinks': False,
        'ignore_formats': [''],
        'include_sheet_pattern': '^.*$',
        'lineterminator': '\n',
        'merge_cells': False,
        'outputencoding': 'utf-8',
        'quoting': csv.QUOTE_NONE,
        'scifloat': False,
        'sheetdelimiter': "**************************************************",
        'skip_empty_lines': True,
        'skip_trailing_columns': False,
        'timeformat': None
    }
    xlsx2csv = Xlsx2csv(source, **kwargs)
    # xlsx2csv.convert(TorgWriter(Path(sys.argv[2])), 1)
    writer = TorgWriter()
    xlsx2csv.convert(writer, 1)
    return writer

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-t', action='store_true', dest='stop_on_torg', default=False, help='Stop after generating torg file.')
    # parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
    # parser.add_argument('-s', '--source', action='store', dest='source', required=True)
    # parser.add_argument('-o', '--output', action='store', dest='output', required=True)

    parser.add_argument("source", nargs=1)

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
