#! /usr/bin/env python3
# -*- Python -*-

"""
Converts xlsx to torg, waits for torg editing, converts it to ace
"""

import sys, os, pprint, subprocess, re, shutil, time, signal, datetime, collections
from pathlib import Path
# sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

class Error (Exception): pass

# ======================================================================

def main(args):
    names = [split_name(name) for name in subprocess.check_output(["whocc-xlsx-to-torg", "-n", "-f", "{virus_type_lineage} {assay_low_rbc} {lab_low} {table_date}", args.source[0]]).decode("utf-8").split("\n") if name]
    if not names:
        raise Error("File provides no sheets with tables")
    output_dirs = frozenset(detect_dir(name) for name in names)
    if len(output_dirs) != 1:
        raise RuntimeError(f"None or multiple output dirs {output_dirs} inferred from {name}")
    output_dir = next(iter(output_dirs))
    if not args.overwrite:
        check_output_names(names, output_dir=output_dir)
    copy_xlsx(args.source[0], output_dir.joinpath("xlsx", make_xlsx_name(names)))
    subprocess.check_call(["whocc-xlsx-to-torg", "-f", "{virus_type_lineage}-{assay_low_rbc}-{lab_low}-{table_date}", "-s", output_dir.joinpath("whocc-xlsx-to-torg.scm"), "-o", output_dir.joinpath("torg"), args.source[0]])
    if len(names) == 1 and args.edit_torg:
        edit_torg_make_ace(names[0], output_dir=output_dir, stop_on_torg=args.stop_on_torg)
    elif not args.stop_on_torg:
        make_all_ace(names, output_dir=output_dir)

# ----------------------------------------------------------------------

class Name: pass

def split_name(name):
    result = Name()
    result.subtype, assay_rbc, result.lab, result.date = name.split(" ")
    if "-" in assay_rbc:
        result.assay, result.rbc = assay_rbc.split("-")
        result.stem = f"{result.subtype}-{result.assay}-{result.rbc}-{result.lab}-{result.date}"
    else:
        result.assay, result.rbc = assay_rbc, None
        result.stem = f"{result.subtype}-{result.assay}-{result.lab}-{result.date}"
    return result

# ----------------------------------------------------------------------

def detect_dir(name):
    whocc_tables_dir = Path("~/ac/whocc-tables").expanduser()
    cmd = [whocc_tables_dir.joinpath("bin", "output-dir"), "--subtype", name.subtype, "--assay", name.assay, "--lab", name.lab]
    if name.rbc:
        cmd.extend(["--rbc", name.rbc])
    output_dir = subprocess.check_output(cmd)
    output_dir = Path(output_dir.decode("utf-8").strip())
    return output_dir

# ----------------------------------------------------------------------

def make_xlsx_name(names):
    if len(names) == 1:
        return f"{next(iter(names)).stem}.xlsx"
    else:
        names_sorted = sorted(names, key=lambda n: n.date)
        return f"{names_sorted[0].stem}-{names_sorted[-1].date}.xlsx"

# ----------------------------------------------------------------------

def check_output_names(names, output_dir):
    num_exist = 0
    def check(name):
        nonlocal num_exist
        path = output_dir.joinpath(name)
        if path.exists():
            num_exist += 1
            return f"*** {path}"
        else:
            return f"    {path}"

    files = [output_dir.joinpath("xlsx", make_xlsx_name(names))] + [output_dir.joinpath("torg", f"{nn.stem}.torg") for nn in names] + [output_dir.joinpath(f"{nn.stem}.ace") for nn in names]
    if "h3-neut-crick-" in names[0].stem:
        files += [output_dir.joinpath("prn-read", f"{nn.stem}.ace") for nn in names]
    msg = "\n".join(check(nam) for nam in files)
    if num_exist:
        raise Error(f"{num_exist} file(s) marked with *** already exist(s) (use -f to overwrite):\n{msg}")

# ----------------------------------------------------------------------

def copy_xlsx(source, xlsx_name):
    subprocess.check_call(["/usr/bin/xattr", "-c", source])
    module_logger.info(f"{source} -> {xlsx_name}")
    shutil.copyfile(source, xlsx_name)

# ----------------------------------------------------------------------

def edit_torg_make_ace(name, output_dir, stop_on_torg):
    torg_filename = output_dir.joinpath("torg", name.stem + ".torg")
    ace_filename = output_dir.joinpath(name.stem + ".ace")
    ace_prn_read = None
    prn, prn_read_titers = is_chart_prn_with_read_titers(torg_filename)
    if prn_read_titers:
        ace_prn_read = output_dir.joinpath("prn-read", name.stem + ".ace")
    # subprocess.check_call(["emacsclient", "-q", "-e", f"(progn (find-file \"{torg_filename}\") (forward-line 10) (org-cycle) (forward-line 0) (save-buffer))"])
    subprocess.check_call(["emacsclient", "-q", "-e", f"(progn (find-file \"{torg_filename}\") (forward-line 10))"])
    if args.stop_on_torg:
        return
    signal.signal(signal.SIGHUP, sig_handler)
    while True:
        try:
            time.sleep(60 * 60)
        except KeyboardInterrupt:
            break
        except Exception as err:
            # print(err)
            pass
        make_ace(torg_filename, ace_filename, ace_prn_read=ace_prn_read, prn_remove_concentration=prn)

# ----------------------------------------------------------------------

def make_all_ace(names, output_dir):
    for name in names:
        source = output_dir.joinpath("torg", name.stem + ".torg")
        ace_prn_read = None
        prn, prn_read_titers = is_chart_prn_with_read_titers(source)
        if prn_read_titers:
            ace_prn_read = output_dir.joinpath("prn-read", name.stem + ".ace")
        make_ace(source, output_dir.joinpath(name.stem + ".ace"), ace_prn_read=ace_prn_read, prn_remove_concentration=prn)

# ----------------------------------------------------------------------

sRePrnRead = re.compile(r"(\s+\|\s+\d+\s+/\s+\d+\s+\|)")

def is_chart_prn_with_read_titers(source):
    assay_prn = False
    for line in open(source):
        if line:
            if line.startswith("- Assay: PRN"):
                assay_prn = True
            elif assay_prn and line[0] == '|' and sRePrnRead.search(line):
                # module_logger.warning(f"\"{sRePrnRead.search(line)!r}\" {line}")
                return assay_prn, True
    return assay_prn, False

# ----------------------------------------------------------------------

def make_ace(source, ace, ace_prn_read=None, prn_remove_concentration=False):
    print(f"\n{'=' * 150}\n{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n>>> {source}:11\n>>> {ace}:1")
    if ace_prn_read:
        print(f">>> {ace_prn_read}:1")
    print()
    prn_rem_conc = "" # leads to duplicates for A/Singapore/INFIMH-16-0019/2016 10-4 and 10-6: "--prn-remove-concentration" if prn_remove_concentration else ""
    subprocess_run(f"chart-org-table-to-ace {prn_rem_conc} '{source}' '{ace}' && chart-fix-names-passages '{ace}' '{ace}' && chart-table '{ace}'")
    if ace_prn_read:
        subprocess_run(f"chart-org-table-to-ace --prn-read {prn_rem_conc} '{source}' '{ace_prn_read}' && chart-fix-names-passages '{ace_prn_read}' '{ace_prn_read}' && chart-table '{ace_prn_read}'")

# ----------------------------------------------------------------------

def subprocess_run(cmd):
    print(f"{cmd}\n")
    subprocess.check_call(cmd, shell=True)
    print("\n\n")

# ----------------------------------------------------------------------

def sig_handler(signo, stack):
    raise RuntimeError(f"SIG {signo}")

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-e', action='store_true', dest='edit_torg', default=False, help='Edit .torg and autogenerate ace on save.')
    parser.add_argument('-t', action='store_true', dest='stop_on_torg', default=False, help='Stop after generating torg file.')
    parser.add_argument('-f', action='store_true', dest='overwrite', default=False, help='overwrite exiting output files.')

    parser.add_argument("source", nargs=1)

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Error as err:
    logging.error(str(err))
    exit_code = 1
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
