#! /usr/bin/env python3
# -*- Python -*-

import sys, os, re, pprint, subprocess, datetime
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

sLabs = ["CDC", "MELB", "NIID", "NIMR"]
#sSubtypes = ["B", "H1PDM", "H3"]

# ======================================================================

def main(args):
    os.environ["LD_LIBRARY_PATH"] = str(Path("~/AD/lib").expanduser())
    sources = walk_h3(args.source_dir, "H3") # subtype -> lab -> rbc/neut -> [filename]
    sources.update(walk_h3(args.source_dir, "H1PDM"))
    sources.update(walk_b(args.source_dir))
    # count_sources(sources)
    # pprint.pprint(sources)
    plotted_data = plot_soures(sources, Path(args.output_dir))
    make_index(plotted_data, Path(args.output_dir))
    make_readme(plotted_data, Path(args.output_dir))

# ----------------------------------------------------------------------

def walk_h3(source_dir, subtype):
    return {subtype: {lab: walk_h3_lab(Path(source_dir, subtype, lab)) for lab in sLabs}}

sReH3name = re.compile(r"a-h\dn\d-(?P<lab>[a-z]+)-(?P<rbc>[a-z\-]+)(?P<date>[0-9\-_]+)(?:\.[0-9A-FRW\-]+|-international-names|\.EXCLUDED)?\.ace")

def walk_h3_lab(source_dir):
    result = {}
    for filename in source_dir.glob("*.ace"):
        m = sReH3name.match(filename.name)
        if m:
            if ".EXCLUDED." not in filename.name:
                rbc = m.group("rbc")[:-1]
                result.setdefault(rbc, []).append(filename)
        else:
            raise ValueError("Cannot match: " + str(filename))
    return result

# ----------------------------------------------------------------------

sReBname = re.compile(r"b-(?P<lab>[a-z]+)-(?P<rbc>[a-z\-]+)(?P<date>[0-9]+)(?P<yamagata>[\-_]\d+)?\.ace")

def walk_b(source_dir):
    result = {}
    # CDC, NIID, NIMR
    for lab, mix_end in [["CDC", "20130501"], ["NIID", "20100501"], ["NIMR", "0000"]]:
        for filename in Path(source_dir, "B", lab).glob("*.ace"):
            m = sReBname.match(filename.name)
            if m:
                rbc = m.group("rbc")[:-1]
                if m.group("date") < mix_end:
                    subtype = "B"
                elif m.group("yamagata"):
                    subtype = "BY"
                else:
                    subtype = "BV"
                result.setdefault(subtype, {}).setdefault(lab, {}).setdefault(rbc, []).append(filename)
            else:
                raise ValueError("Cannot match: " + str(filename))
    # MELB
    for subtype, lineage in [["BV", "victoria"], ["BY", "yamagata"]]:
        for filename in Path(source_dir, "B", "MELB", lineage).glob("*.ace"):
            m = sReBname.match(filename.name)
            if m:
                rbc = m.group("rbc")[:-1]
                result.setdefault(subtype, {}).setdefault("MELB", {}).setdefault(rbc, []).append(filename)
            else:
                raise ValueError("Cannot match: " + str(filename))
    return result

# ----------------------------------------------------------------------

def count_sources(sources):
    counted = {subtype: {lab: {rbc: len(v3) for rbc, v3 in v2.items()} for lab, v2 in v1.items()} for subtype, v1 in sources.items()}
    pprint.pprint(counted)

# ----------------------------------------------------------------------

def plot_soures(sources, output_dir):
    plotted_data = {}
    for subtype, v1 in sources.items():
        for lab, v2 in v1.items():
            for rbc, v3 in v2.items():
                if len(v3) > 9:
                    plots = plot_source_set(key="-".join([subtype, lab, rbc]), sources=v3, output_dir=output_dir)
                    plotted_data.setdefault(subtype, {}).setdefault(lab, {})[rbc] = plots
    # pprint.pprint(plotted_data)
    return plotted_data

# ----------------------------------------------------------------------

def plot_source_set(key, sources, output_dir):
    output_dir.mkdir(parents=True, exist_ok=True)
    module_logger.info('{} {} {} - {}'.format(key, len(sources), sources[0].name, sources[-1].name))
    output_filename = "{}.pdf".format(key)
    subprocess.check_call("~/AD/bin/whocc-histogram-of-titers '{}' '{}'".format(output_dir.joinpath(output_filename), "' '".join(str(s) for s in sources)), shell=True)
    return {"name": output_filename, "num": len(sources)}

# ----------------------------------------------------------------------

sHtmlTemplate = """<html>
<head>
  <style>
   h2 {{ margin-left: 1em; }}
   h3 {{ margin-left: 2em; }}
   ol {{ margin-left: 3em; }}
  </style>
</head>
<body>
  <h1>WHO CCs tables. Historgrams of titers</h1>
  {content}
  <hr>
  <p class="generated">Generated by {generated}</p>
  <p class="generated">Generated on {today}</p>
</body>
</html>
"""

def make_index(plotted_data, output_dir):

    def make_rbc(v2):
        return "\n".join("<li><a href=\"{}\">{} ({})</a></li>".format(v2[rbc]["name"], rbc.upper(), v2[rbc]["num"]) for rbc in sorted(v2))

    def make_labs(v1):
        return "\n".join("<h2>{}</h2><ul>{}</ul>".format(lab, make_rbc(v1[lab])) for lab in sorted(v1))

    # pprint.pprint(plotted_data)
    content = "\n<hr>\n".join("<h1>{}</h1>\n{}".format(subtype, make_labs(plotted_data[subtype])) for subtype in sorted(plotted_data, reverse=True))
    output_dir.mkdir(parents=True, exist_ok=True)
    with output_dir.joinpath("index.html").open("w") as f:
        f.write(sHtmlTemplate.format(content=content, generated=sys.argv[0], today=datetime.datetime.now().strftime("%Y-%m-%d %H:%M")))

# ----------------------------------------------------------------------

def make_readme(plotted_data, output_dir):
    with output_dir.joinpath("README").open("w") as f:
        f.write("Generated by: " + sys.argv[0] + "\n")
        f.write("Generated on: " + datetime.datetime.now().strftime("%Y-%m-%d %H:%M\n\n"))
        pprint.pprint(plotted_data, f)

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    parser.add_argument('--source', action='store', dest='source_dir', default="/syn/eu/ac/ace-store")
    parser.add_argument('--output', action='store', dest='output_dir', default="/syn/eu/www/who/historgams-of-titers")

    args = parser.parse_args()
    if args.verbose:
        args.loglevel = logging.DEBUG
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
