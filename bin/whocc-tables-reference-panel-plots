#! /usr/bin/env python3

import sys, os, re, pprint, subprocess, datetime
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    parser.add_argument('--source', action='store', dest='source_dir', required=True, help="/syn/eu/ac/whocc-tables/h3-hint-cdc")
    parser.add_argument('--output', action='store', dest='output_dir', required=True, help="/syn/eu/www/who/reference-panel-plots")
    parser.add_argument('--chunk', action='store', type=float, dest='chunk_size', default=40)
    parser.add_argument('--num-recent-table-plots', action='store', type=int, dest='num_recent_table_plots', default=10)

    args = parser.parse_args()
    if args.verbose:
        args.loglevel = logging.DEBUG
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
