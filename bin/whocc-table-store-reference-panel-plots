#! /usr/bin/env python3
# -*- Python -*-

import sys, os, re, pprint
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

sLabs = ["CDC", "MELB", "NIID", "NIMR"]
#sSubtypes = ["B", "H1PDM", "H3"]

# ======================================================================

def main(args):
    h3_sources = walk_h3(args.source_dir, "H3")
    pprint.pprint(h3_sources)
    # h1_sources = walk_h3(args.source_dir, "H1PDM")

# ----------------------------------------------------------------------

def walk_h3(source_dir, subtype):
    return {lab: walk_h3_lab(Path(source_dir, subtype, lab)) for lab in sLabs}

sReH3name = re.compile(r"a-h\dn\d-(?P<lab>[a-z]+)-(?P<rbc>[a-z\-]+)(?P<date>[0-9\-_]+)\.ace")

def walk_h3_lab(source_dir):
    result = {}
    for filename in source_dir.glob("*.ace"):
        m = sReH3name.match(filename.name)
        if m:
            rbc = m["rbc"][:-1]
            result.setdefault(rbc, []).append(filename)
        else:
            raise ValueError("Cannot match: " + str(filename))
    return result

# ======================================================================

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    parser.add_argument('--source', action='store', dest='source_dir', default="/syn/eu/ac/ace-store")
    parser.add_argument('--output', action='store', dest='output_dir', default="/syn/eu/www/who/reference-panel-plots")

    args = parser.parse_args()
    if args.verbose:
        args.loglevel = logging.DEBUG
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
