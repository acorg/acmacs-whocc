#! /usr/bin/env python3
# -*- Python -*-

raise RuntimeError("OBSOLETE 2021-05-14, use whocc-tables-reference-panel-plots")

import sys, os, re, pprint, subprocess, datetime
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

sLabs = ["CDC", "MELB", "NIID", "NIMR"]
#sSubtypes = ["B", "H1PDM", "H3"]

# ======================================================================

def main(args):
    os.environ["LD_LIBRARY_PATH"] = str(Path("~/AD/lib").expanduser()) + ":" + os.environ.get("LD_LIBRARY_PATH", "")
    sources = walk_h3(args.source_dir, "H3") # subtype -> lab -> rbc/neut -> [filename]
    sources.update(walk_h3(args.source_dir, "H1PDM"))
    sources.update(walk_b(args.source_dir))
    sort_sources(sources)
    # count_sources(sources)
    # pprint.pprint(sources)
    plotted_data = plot_soures(sources=sources, chunk_size=args.chunk_size, output_dir=Path(args.output_dir), num_recent_table_plots=args.num_recent_table_plots)
    make_index(plotted_data, Path(args.output_dir))
    make_readme(plotted_data, Path(args.output_dir))

# ----------------------------------------------------------------------

def walk_h3(source_dir, subtype):
    return {subtype: {lab: walk_h3_lab(Path(source_dir, subtype, lab)) for lab in sLabs}}

sReH3name = re.compile(r"a-h\dn\d-(?P<lab>[a-z]+)-(?P<rbc>[a-z\-]+)(?P<date>[0-9\-_]+)(?:\.[0-9A-FRW\-]+|-international-names|\.EXCLUDED)?\.ace")

def walk_h3_lab(source_dir):
    result = {}
    for filename in source_dir.glob("*.ace"):
        m = sReH3name.match(filename.name)
        if m:
            if ".EXCLUDED." not in filename.name:
                rbc = m.group("rbc")[:-1]
                result.setdefault(rbc, []).append(filename)
        else:
            raise ValueError("Cannot match: " + str(filename))
    return result

# ----------------------------------------------------------------------

sReBname = re.compile(r"b-(?P<lab>[a-z]+)-(?P<rbc>[a-z\-]+)(?P<date>[0-9]+)(?P<yamagata>[\-_]\d+)?\.ace")

def walk_b(source_dir):
    result = {}
    # CDC, NIID, NIMR
    for lab, mix_end in [["CDC", "20130501"], ["NIID", "20100501"], ["NIMR", "0000"]]:
        for filename in Path(source_dir, "B", lab).glob("*.ace"):
            m = sReBname.match(filename.name)
            if m:
                rbc = m.group("rbc")[:-1]
                if m.group("date") < mix_end:
                    subtype = "B"
                elif m.group("yamagata"):
                    subtype = "BY"
                else:
                    subtype = "BV"
                result.setdefault(subtype, {}).setdefault(lab, {}).setdefault(rbc, []).append(filename)
            else:
                raise ValueError("Cannot match: " + str(filename))
    # MELB
    for subtype, lineage in [["BV", "victoria"], ["BY", "yamagata"]]:
        for filename in Path(source_dir, "B", "MELB", lineage).glob("*.ace"):
            m = sReBname.match(filename.name)
            if m:
                rbc = m.group("rbc")[:-1]
                result.setdefault(subtype, {}).setdefault("MELB", {}).setdefault(rbc, []).append(filename)
            else:
                raise ValueError("Cannot match: " + str(filename))
    return result

# ----------------------------------------------------------------------

def sort_sources(sources):
    if isinstance(sources, list):
        sources.sort()
    elif isinstance(sources, dict):
        for value in sources.values():
            sort_sources(value)

# ----------------------------------------------------------------------

def count_sources(sources):
    counted = {subtype: {lab: {rbc: len(v3) for rbc, v3 in v2.items()} for lab, v2 in v1.items()} for subtype, v1 in sources.items()}
    pprint.pprint(counted)

# ----------------------------------------------------------------------

def plot_soures(sources, chunk_size, output_dir, num_recent_table_plots):
    plotted_data = {}
    for subtype, v1 in sources.items():
        for lab, v2 in v1.items():
            for rbc, v3 in v2.items():
                if len(v3) > 9:
                    plots = plot_source_set(key="-".join([subtype, lab, rbc]), sources=v3, chunk_size=chunk_size, output_dir=output_dir, num_recent_table_plots=num_recent_table_plots)
                    plotted_data.setdefault(subtype, {}).setdefault(lab, {})[rbc] = plots
    # pprint.pprint(plotted_data)
    return plotted_data

# ----------------------------------------------------------------------

def plot_source_set(key, sources, chunk_size, output_dir, num_recent_table_plots):
    module_logger.info('{} {} {} - {}'.format(key, len(sources), sources[0].name, sources[-1].name))
    first_table_for_one_table_plots = len(sources) - num_recent_table_plots if len(sources) > num_recent_table_plots else 0
    plots = [plot_one_table(key=key, table_no=table_no, sources=sources, output_dir=output_dir) for table_no in range(first_table_for_one_table_plots, len(sources))]
    chunks = make_chunks(sources, chunk_size)
    plots += [plot_chunk(key, chunk_no, chunk, output_dir) for chunk_no, chunk in enumerate(chunks, start=1)]
    return plots

# ----------------------------------------------------------------------

def make_chunks(sources, chunk_size):
    chunks = []
    common = int(chunk_size * 0.25)
    for start in range(0, 10000, chunk_size - common):
        if not chunks or (len(sources) - start) > common:
            chunks.append(sources[start : start+chunk_size])
        else:
            break
    return chunks

# ----------------------------------------------------------------------

sReNameGetDate = re.compile(r".+-(\d{8}(?:[\-_]\d+)?)\.ace$")

def plot_chunk(key, index, sources, output_dir):
    m1 = sReNameGetDate.match(sources[0].name)
    m2 = sReNameGetDate.match(sources[-1].name)
    if not m1 or not m2:
        raise ValueError("Date extraction failed: {!r} {!r}".format(sources[0].name, sources[-1].name))
    d1 = m1.group(1)
    d2 = m2.group(1)
    module_logger.info('chunk {} {} - {}'.format(len(sources), d1, d2))
    output_dir.mkdir(parents=True, exist_ok=True)
    output_filename = "{}-{:02d}-{}-{}.pdf".format(key, index, d1, d2)
    subprocess.check_call("~/AD/bin/whocc-reference-panel-plots '{}' '{}'".format(output_dir.joinpath(output_filename), "' '".join(str(s) for s in sources)), shell=True)
    return {"name": output_filename, "d1": d1, "d2": d2, "num": len(sources)}

# ----------------------------------------------------------------------

def plot_one_table(key, table_no, sources, output_dir):
    m1 = sReNameGetDate.match(sources[table_no].name)
    if not m1:
        raise ValueError("Date extraction failed: {!r} ".format(sources[table_no].name))
    d1 = m1.group(1)
    module_logger.info('one table {}'.format(d1))
    output_dir.mkdir(parents=True, exist_ok=True)
    output_filename = "{}-one-{:02d}-{}.pdf".format(key, table_no, d1)
    # module_logger.info("one table {} <-- ({}) '{}'".format(output_dir.joinpath(output_filename), table_no + 1, "' '".join(str(s) for s in sources[:table_no + 1])))
    # module_logger.info("one table {}".format(output_dir.joinpath(output_filename)))
    try:
        subprocess.check_call("~/AD/bin/whocc-reference-panel-plots --last --min-tables 2 '{}' '{}'".format(output_dir.joinpath(output_filename), "' '".join(str(s) for s in sources[:table_no + 1])), shell=True)
        return {"name": output_filename, "d1": d1, "d2": "one", "num": 1}
    except subprocess.CalledProcessError as err:
        module_logger.error(str(err))
        return {}

# ----------------------------------------------------------------------

sHtmlTemplate = """<html>
<head>
  <style>
   h2 {{ margin-left: 1em; }}
   h3 {{ margin-left: 2em; }}
   ol {{ margin-left: 0; font-weight: normal; }}
   ul.recent {{ margin-left: 3.2em; font-weight: bold; list-style-type: none; }}
   ul.recent > li {{ margin-bottom: 1em; }}
  </style>
  <title>WHO CCs tables. Reference panel plots {today}</title>
</head>
<body>
  <h1>WHO CCs tables. Reference panel plots ({today}).</h1>
  {content}
  <hr>
  <p class="generated">Generated by {generated}</p>
  <p class="generated">Generated on {now}</p>
</body>
</html>
"""

def make_index(plotted_data, output_dir):

    def make_entries_recent(v3):
        return "<li>" + "</li>\n<li>".join("<a href=\"{}\">{}</a>".format(entry["name"], entry["d1"]) for entry in v3 if entry and entry["d2"] == "one") + "</li>"

    def make_entries_all(v3):
        return "<li>" + "</li>\n<li>".join("<a href=\"{}\">{} - {} ({})</a>".format(entry["name"], entry["d1"], entry["d2"], entry["num"]) for entry in v3 if entry and entry["d2"] != "one") + "</li>"

    def make_rbc(v2):
        return "\n".join("<h3>{}</h3>\n<ul class='recent'>\n <li>For antigens/sera in the recent tables\n  <ol>{}</ol>\n </li>\n <li>All tables\n  <ol>{}</ol>\n </li>\n</ul>\n".format(rbc.upper(), make_entries_recent(v2[rbc]), make_entries_all(v2[rbc])) for rbc in sorted(v2))

    def make_labs(v1):
        return "\n".join("<h2>{}</h2>{}".format(lab, make_rbc(v1[lab])) for lab in sorted(v1))

    # pprint.pprint(plotted_data)
    content = "\n<hr>\n".join("<h1>{}</h1>\n{}".format(subtype, make_labs(plotted_data[subtype])) for subtype in sorted(plotted_data, reverse=True))
    output_dir.mkdir(parents=True, exist_ok=True)
    with output_dir.joinpath("index.html").open("w") as f:
        f.write(sHtmlTemplate.format(content=content, generated=sys.argv[0], today=datetime.date.today().strftime("%Y-%m-%d"), now=datetime.datetime.now().strftime("%Y-%m-%d %H:%M")))

# ----------------------------------------------------------------------

def make_readme(plotted_data, output_dir):
    with output_dir.joinpath("README").open("w") as f:
        f.write("Generated by: " + sys.argv[0] + "\n")
        f.write("Generated on: " + datetime.datetime.now().strftime("%Y-%m-%d %H:%M\n\n"))
        pprint.pprint(plotted_data, f)

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    parser.add_argument('--source', action='store', dest='source_dir', default="/syn/eu/ac/ace-store")
    parser.add_argument('--output', action='store', dest='output_dir', default="/syn/eu/www/who/reference-panel-plots")
    parser.add_argument('--chunk', action='store', type=float, dest='chunk_size', default=40)
    parser.add_argument('--num-recent-table-plots', action='store', type=int, dest='num_recent_table_plots', default=10)

    args = parser.parse_args()
    if args.verbose:
        args.loglevel = logging.DEBUG
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
