#! /usr/bin/env python3
# -*- Python -*-

import sys, os, re, json, pprint, subprocess, datetime
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

sPageData = [
    {"dir": "h1-cdc",  "virus_type": "A(H1N1)2009PDM", "lab": "CDC",  "assay_type": "HI", "lineage": ""},
    {"dir": "h1-melb", "virus_type": "A(H1N1)2009PDM", "lab": "MELB", "assay_type": "HI", "lineage": ""},
    {"dir": "h1-niid", "virus_type": "A(H1N1)2009PDM", "lab": "NIID", "assay_type": "HI", "lineage": ""},
    {"dir": "h1-nimr", "virus_type": "A(H1N1)2009PDM", "lab": "NIMR", "assay_type": "HI", "lineage": ""},

    {"dir": "h3-hi-cdc",  "virus_type": "A(H3N2)", "lab": "CDC",  "assay_type": "HI", "lineage": ""},
    {"dir": "h3-hi-melb", "virus_type": "A(H3N2)", "lab": "MELB", "assay_type": "HI", "lineage": ""},
    {"dir": "h3-hi-nimr", "virus_type": "A(H3N2)", "lab": "NIMR", "assay_type": "HI", "lineage": ""},

    {"dir": "h3-neut-cdc",  "virus_type": "A(H3N2)", "lab": "CDC",  "assay_type": "NEUTRALIZATION", "lineage": ""},
    {"dir": "h3-neut-melb", "virus_type": "A(H3N2)", "lab": "MELB", "assay_type": "NEUTRALIZATION", "lineage": ""},
    {"dir": "h3-neut-niid", "virus_type": "A(H3N2)", "lab": "NIID", "assay_type": "NEUTRALIZATION", "lineage": ""},
    {"dir": "h3-neut-nimr", "virus_type": "A(H3N2)", "lab": "NIMR", "assay_type": "NEUTRALIZATION", "lineage": ""},

    {"dir": "b-vic-cdc",  "virus_type": "B", "lab": "CDC",  "assay_type": "HI", "lineage": "VICTORIA"},
    {"dir": "b-vic-melb", "virus_type": "B", "lab": "MELB", "assay_type": "HI", "lineage": "VICTORIA"},
    {"dir": "b-vic-niid", "virus_type": "B", "lab": "NIID", "assay_type": "HI", "lineage": "VICTORIA"},
    {"dir": "b-vic-nimr", "virus_type": "B", "lab": "NIMR", "assay_type": "HI", "lineage": "VICTORIA"},

    {"dir": "b-yam-cdc",  "virus_type": "B", "lab": "CDC",  "assay_type": "HI", "lineage": "YAMAGATA"},
    {"dir": "b-yam-melb", "virus_type": "B", "lab": "MELB", "assay_type": "HI", "lineage": "YAMAGATA"},
    {"dir": "b-yam-niid", "virus_type": "B", "lab": "NIID", "assay_type": "HI", "lineage": "YAMAGATA"},
    {"dir": "b-yam-nimr", "virus_type": "B", "lab": "NIMR", "assay_type": "HI", "lineage": "YAMAGATA"},
    ]

sRowOrder = ["1", "i", "s"]
sImageSize = 300

# ======================================================================

def main():
    exit_code = 0
    try:
        process_chains()
    except Exception as err:
        module_logger.exception(str(err))
        exit_code = 1
    return exit_code

# ----------------------------------------------------------------------

def process_chains():
    chains = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json whocc_chain_list", shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["data"]
    for page_data in sPageData:
        chain_id = None
        for inspector in reversed(chains):
            if page_data["virus_type"] == inspector["virus_type"] and page_data["lab"] == inspector["lab"] and page_data["assay_type"] == inspector["assay_type"] and page_data["lineage"] == inspector.get("lineage", ""):
                chain_id = inspector["_id"]
                break
        if chain_id:
            images, chain_data = generate_for_chain(page_data, chain_id)
            generate_html(page_data=page_data, images=images, chain_id=chain_id, chain_data=chain_data)

# ----------------------------------------------------------------------

def generate_for_chain(page_data, chain_id, max_images=None):
    Path(page_data["dir"]).mkdir(parents=True, exist_ok=True)
    images = []
    chain_data = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json doc_get id='{chain_id}' fields='[\"results\",\"forked\",\"forked_step\"]'".format(chain_id=chain_id), shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["data"]
    if chain_data.get("forked"):
        parent_images, parent_data = generate_for_chain(page_data, chain_id=chain_data["forked"], max_images=chain_data["forked_step"])
        images.extend(parent_images)
    print(page_data["dir"], chain_id)
    images.extend(get_maps_for_chain_results(page_data=page_data, max_images=max_images, chain_results=chain_data["results"]))
    return images, response

# ----------------------------------------------------------------------

def get_maps_for_chain_results(page_data, max_images, chain_results):
    cr = chain_results if max_images is None else chain_results[:max_images]
    images = [{key: get_map(page_data, chart_id=chain_result[key]) for key in sRowOrder if chain_result.get(key)} for chain_result in cr]
    return images

# ----------------------------------------------------------------------

def get_map(page_data, chart_id):
    try:
        output_prefix = Path(page_data["dir"], chart_id)
        output_json = output_prefix.with_suffix(".json")
        output_png = output_prefix.with_suffix(".png")
        if not output_json.exists():
            response_details = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json chart_details_for_root id='{chart_id}' details='[\"name\"]'".format(chart_id=chart_id), shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["details"]
            response_get = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json doc_get id='{chart_id}' fields='[\"stresses\"]'".format(chart_id=chart_id), shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["data"]
            result = {"name": response_details.get("name"), "stress": response_get.get("stresses", [-1])[0], "path": output_png.name}
            json.dump(result, output_json.open("w"), indent=2, sort_keys=True)
        else:
            result = json.load(output_json.open())
        if not output_png.exists():
            print("plotting", output_png, result["name"])
            curdir = os.getcwd()
            try:
                os.chdir(str(output_png.parent))
                subprocess.check_call("aw -u whocc-tables aw-chart.py --warning export id='{chart_id}' format=ace".format(chart_id=chart_id), shell=True, stderr=None)
                subprocess.check_call("map-draw --clade '{chart_id}.ace' '{chart_id}.pdf' 2>&1".format(chart_id=chart_id), shell=True, stderr=None)
                subprocess.check_call("/usr/bin/convert -resize '{image_size}' '{chart_id}.pdf' '{chart_id}.png'".format(chart_id=chart_id, image_size=sImageSize), shell=True, stderr=None)
            except:
                if Path(chart_id + ".ace").exists():
                    Path(chart_id + ".ace").unlink()
                if Path(chart_id + ".pdf").exists():
                    Path(chart_id + ".pdf").unlink()
                if Path(chart_id + ".png").exists():
                    Path(chart_id + ".png").unlink()
            finally:
                os.chdir(curdir)
        # print(output_png, result)
        return result
    except Exception as err:
        module_logger.exception("ERROR: {}".format(err))
        return None

# ----------------------------------------------------------------------

sTemplate = """<!DOCTYPE html>
<html>
 <!-- {modified} -->
 <head>
  <title>{title}</title>
  <style type="text/css">
   {styles}
  </style>
 </head>
 <body>
  <table>
   <tr class="column_names">
    {column_names}
   </tr>
   <tr class="head_individual">
    {column_head_individual}
   </tr>
   <tr class="individual">
    {column_individual}
   </tr>
   <tr class="head_incremental">
    {column_head_incremental}
   </tr>
   <tr class="incremental">
    {column_incremental}
   </tr>
   <tr class="head_scratch">
    {column_head_scratch}
   </tr>
   <tr class="scratch">
    {column_scratch}
   </tr>
  <table>
  <p class="chain_id">Chain: {chain_id}</p>
  <p class="modified">{modified}</p>
 </body>
</html>
"""

sStyles = """
   img.map { border: 1px solid black; }
   td { padding: 0 0.5em; }
   tr.head_individual td { padding-left: 1em; }
   tr.head_incremental td { padding-top: 1em; padding-left: 1em; }
   tr.head_scratch td { padding-top: 1em; padding-left: 1em; }
   tr.column_names td { font-weight: bold; text-align: center; }
   p.chain_id { font-size: 0.9em; }
   p.modified { font-size: 0.9em; }
"""

def generate_html(page_data, images, chain_id, chain_data):
    with Path(page_data["dir"], "data.json").open("w") as f:
        json.dump(images, f, indent=2, sort_keys=True, default=lambda obj: repr(obj))
    data = {
        "title": title(chain_data=chain_data, images=images),
        "styles": sStyles,
        "column_names": column_names(images),
        "column_head_individual": column_heads(images, "1"),
        "column_individual": column_images(images, "1"),
        "column_head_incremental": column_heads(images, "i"),
        "column_incremental": column_images(images, "i"),
        "column_head_scratch": column_heads(images, "s"),
        "column_scratch": column_images(images, "s"),
        "chain_id": str(chain_id),
        "modified": "Generated by {} on {}".format(sys.argv[0], datetime.datetime.now().strftime("%Y-%m-%d %H:%M")),
        }
    with Path(page_data["dir"], "index.html").open("w") as f:
        f.write(sTemplate.format(**data))

def title(chain_data, images):
    def fix_title(text):
        return text
    return "{} ({} tables)".format(fix_title(chain_data.get("description")), len(images))

def column_names(images):
    def make_name(column):
        entry = column.get("1")
        if entry is not None:
            name = entry.get("name", "")
            name = re.sub(r"(CDC|MELB|NIID|NIMR|VIDRL|Crick)\s*", "", name, flags=re.I)
            name = re.sub(r"A\(H\d+N\d+\)\S*\s*", "", name, flags=re.I)
            name = re.sub(r"(turkey|guinea-pig)\s*", "", name, flags=re.I)
        else:
            name = ""
        return name.strip()
    return "<td>" + "</td>\n    <td>".join(make_name(column) for column in images) + "<td>\n"

def column_heads(images, key):
    def make_stress(column):
        r = ""
        entry = column.get(key)
        if entry is not None:
            stress = entry.get("stress")
            if stress is not None:
                r = "{:.2f}".format(stress)
        return r
    return "<td>" + "</td>\n    <td>".join(make_stress(column) for column in images) + "<td>\n"

def column_images(images, key):
    def make_image(column):
        r = ""
        entry = column.get(key)
        if entry is not None:
            path = entry.get("path")
            if path is not None:
                r = '<img class="map" src="{}">'.format(path)
        return r
    return "<td>" + "</td>\n    <td>".join(make_image(column) for column in images) + "<td>\n"

# ----------------------------------------------------------------------

main()

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
