#! /usr/bin/env python3
# -*- Python -*-

import sys, os, re, json, pprint, subprocess, datetime
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

sPageData = [
    {"dir": "h1-cdc",  "virus_type": "A(H1N1)2009PDM", "lab": "CDC",  "assay_type": "HI", "lineage": ""},
    {"dir": "h1-melb", "virus_type": "A(H1N1)2009PDM", "lab": "MELB", "assay_type": "HI", "lineage": ""},
    {"dir": "h1-niid", "virus_type": "A(H1N1)2009PDM", "lab": "NIID", "assay_type": "HI", "lineage": ""},
    {"dir": "h1-nimr", "virus_type": "A(H1N1)2009PDM", "lab": "NIMR", "assay_type": "HI", "lineage": ""},

    {"dir": "h3-hi-cdc",  "virus_type": "A(H3N2)", "lab": "CDC",  "assay_type": "HI", "lineage": ""},
    {"dir": "h3-hi-melb", "virus_type": "A(H3N2)", "lab": "MELB", "assay_type": "HI", "lineage": ""},
    {"dir": "h3-hi-nimr", "virus_type": "A(H3N2)", "lab": "NIMR", "assay_type": "HI", "lineage": ""},

    {"dir": "h3-neut-cdc",  "virus_type": "A(H3N2)", "lab": "CDC",  "assay_type": "NEUTRALIZATION", "lineage": ""},
    {"dir": "h3-neut-melb", "virus_type": "A(H3N2)", "lab": "MELB", "assay_type": "NEUTRALIZATION", "lineage": ""},
    {"dir": "h3-neut-niid", "virus_type": "A(H3N2)", "lab": "NIID", "assay_type": "NEUTRALIZATION", "lineage": ""},
    {"dir": "h3-neut-nimr", "virus_type": "A(H3N2)", "lab": "NIMR", "assay_type": "NEUTRALIZATION", "lineage": ""},

    {"dir": "b-vic-cdc",  "virus_type": "B", "lab": "CDC",  "assay_type": "HI", "lineage": "VICTORIA"},
    {"dir": "b-vic-melb", "virus_type": "B", "lab": "MELB", "assay_type": "HI", "lineage": "VICTORIA"},
    {"dir": "b-vic-niid", "virus_type": "B", "lab": "NIID", "assay_type": "HI", "lineage": "VICTORIA"},
    {"dir": "b-vic-nimr", "virus_type": "B", "lab": "NIMR", "assay_type": "HI", "lineage": "VICTORIA"},

    {"dir": "b-yam-cdc",  "virus_type": "B", "lab": "CDC",  "assay_type": "HI", "lineage": "YAMAGATA"},
    {"dir": "b-yam-melb", "virus_type": "B", "lab": "MELB", "assay_type": "HI", "lineage": "YAMAGATA"},
    {"dir": "b-yam-niid", "virus_type": "B", "lab": "NIID", "assay_type": "HI", "lineage": "YAMAGATA"},
    {"dir": "b-yam-nimr", "virus_type": "B", "lab": "NIMR", "assay_type": "HI", "lineage": "YAMAGATA"},
    ]

sRowOrder = ["1", "i", "s"]
sImageSize = 300

# ======================================================================

def main():
    exit_code = 0
    try:
        process_chains()
    except Exception as err:
        module_logger.exception(str(err))
        exit_code = 1
    return exit_code

# ----------------------------------------------------------------------

def process_chains():
    chains = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json whocc_chain_list", shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["data"]
    for page_data in sPageData:
        chain_id = None
        for inspector in reversed(chains):
            if page_data["virus_type"] == inspector["virus_type"] and page_data["lab"] == inspector["lab"] and page_data["assay_type"] == inspector["assay_type"] and page_data["lineage"] == inspector.get("lineage", ""):
                chain_id = inspector["_id"]
                break
        if chain_id:
            generate_for_chain(page_data, chain_id)

# ----------------------------------------------------------------------

def generate_for_chain(page_data, chain_id, max_images=None):
    Path(page_data["dir"]).mkdir(parents=True, exist_ok=True)
    images = []
    chain_data = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json doc_get id='{chain_id}' fields='[\"results\",\"forked\",\"forked_step\"]'".format(chain_id=chain_id), shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["data"]
    if chain_data.get("forked"):
        parent_images, parent_data = generate_for_chain(page_data, chain_id=chain_data["forked"], max_images=chain_data["forked_step"])
        images.extend(parent_images)
    print(page_data["dir"], chain_id)
    images.extend(get_maps_for_chain_results(page_data=page_data, max_images=max_images, chain_results=chain_data["results"]))
    return images, response

# ----------------------------------------------------------------------

def get_maps_for_chain_results(page_data, max_images, chain_results):
    cr = chain_results if max_images is None else chain_results[:max_images]
    images = [{key: get_map(page_data, chart_id=chain_result[key]) for key in sRowOrder if chain_result.get(key)} for chain_result in cr]
    return images

# ----------------------------------------------------------------------

def get_map(page_data, chart_id):
    try:
        output_prefix = Path(page_data["dir"], chart_id)
        output_json = output_prefix.with_suffix(".json")
        output_png = output_prefix.with_suffix(".png")
        if not output_json.exists():
            response_details = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json chart_details_for_root id='{chart_id}' details='[\"name\"]'".format(chart_id=chart_id), shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["details"]
            response_get = json.loads(subprocess.run("aw -u whocc-tables api.py --warning --direct --json doc_get id='{chart_id}' fields='[\"stresses\"]'".format(chart_id=chart_id), shell=True, check=True, stdout=subprocess.PIPE, stderr=None).stdout.decode("utf-8"))["data"]
            result = {"name": response_details.get("name"), "stress": response_get.get("stresses", [-1])[0], "path": output_png.name}
        else:
            result = json.load(output_json.open())
        if not output_png.exists():
            curdir = os.getcwd()
            try:
                os.chdir(str(output_png.parent))
                subprocess.check_call("aw -u whocc-tables aw-chart.py --warning export id='{chart_id}' format=ace".format(chart_id=chart_id), shell=True, stderr=None)
                subprocess.check_call("map-draw --clade '{chart_id}.ace' '{chart_id}.pdf' 2>&1".format(chart_id=chart_id), shell=True, stderr=None)
                subprocess.check_call("/usr/bin/convert -resize '{image_size}' '{chart_id}.pdf' '{chart_id}.png'".format(chart_id=chart_id, image_size=sImageSize), shell=True, stderr=None)
            finally:
                os.chdir(curdir)
        print(output_png, result)
        return result
    except Exception as err:
        module_logger.exception("ERROR: {}".format(err))
        return None

# ----------------------------------------------------------------------

main()

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
