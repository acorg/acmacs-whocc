#! /usr/bin/env python3
# -*- Python -*-

"""Makes merges of sets of recent tables (recent N tables, recent N*2
tables, etc.), relaxes each merge and runs grid test, then generates
web page showing all the results in the matrix form. Similar to
https://notebooks.antigenic-cartography.org/eu/results/cdc/2018-1114-h1pdm-spb-61-2105-for-david-wentworth/matrix/
(/scp:i19:/syn/eu/ac/results/cdc/2018-1114-h1pdm-spb-61-2105-for-david-wentworth/README)
"""

import sys, re, pprint, time, traceback, subprocess, datetime
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

WORKING_DIR = None

def main(args):
    global WORKING_DIR
    WORKING_DIR = Path(args.working_dir).resolve()
    sets = get_sets(args)
    merges = [make_merge(source_set) for source_set in sets]
    merges_optimized = relax_merges(merges, args)
    state = make_state(merges_optimized, args)
    make_maps(state, args)
    # pprint.pprint(state)
    make_index_html(state, args)

# ----------------------------------------------------------------------

sDateExtractor = re.compile(r"-((?:19|20)\d\d[01]\d[0-3]\d)")

def make_merge(source_set):
    m1 = sDateExtractor.search(source_set[0])
    m2 = sDateExtractor.search(source_set[-1])
    if not m1 or not m2:
        raise RuntimeError(f"cannot extract dates from {source_set[0]} or {source_set[-1]}")
    date_range = f"{m1.group(1)}-{m2.group(1)}"
    merge_name = WORKING_DIR.joinpath(f"{date_range}.merge.ace")
    if not merge_name.exists():
        log_file = WORKING_DIR.joinpath(f"{date_range}.merge.log")
        check_call(["chart-merge", "-o", merge_name] + source_set, log_file=log_file)
        print(merge_name)
    else:
        print(merge_name, " -- already exists")
    return merge_name

# ----------------------------------------------------------------------

def relax_merges(merges, args):
    result = []
    for merge in merges:
        merge_optimized = WORKING_DIR.joinpath(Path(merge.stem).stem + ".grid.ace")
        if not merge_optimized.exists():
            cmd = ["chart-relax-grid",
                   "-n", args.number_of_optimizations,
                   "-d", args.number_of_dimensions,
                   "-m", args.minimum_column_basis, 
                   "--keep-projections", args.projections_to_keep,
                   merge,
                   merge_optimized]
            if args.reorient_to:
                cmd += ["--reorient", args.reorient_to]
            check_call(cmd)
        result.append(merge_optimized)
    return result

# ----------------------------------------------------------------------

def make_state(merges, args):
    state = {"charts": [chart_info(fn) for fn in merges]}
    state["max_grid_results"] = max(ci["grid_results"] for ci in state["charts"])
    return state

# ----------------------------------------------------------------------

def make_maps(state, args):
    state["row_titles"] = ["-".join(chart["dates"]) for chart in state["charts"]]
    state["column_titles"] = [f"grid-{gr+1}" for gr in range(state["max_grid_results"])] + [""] + [str(p+1) for p in range(5)]
    state["grid"] = [make_row_maps(chart, state["max_grid_results"], args) for chart in state["charts"]]

# ----------------------------------------------------------------------

def make_row_maps(chart, max_grid_results, args):
    result = []
    projection = 0
    for gr in range(max_grid_results):
        if gr < chart["grid_results"]:
            result.append(make_map(chart["path"], projection, f"grid-{gr+1}-{chart['dates'][0]}-{chart['dates'][1]}", args))
            projection += 1
        else:
            result.append(None)
    result.append("space")
    for pr in range(5):
        result.append(make_map(chart["path"], projection, f"p-{projection}-{chart['dates'][0]}-{chart['dates'][1]}", args))
        projection += 1
    return result

# ----------------------------------------------------------------------

def make_map(path, projection, stem, args):
    pdf = WORKING_DIR.joinpath(stem + ".pdf")
    if not pdf.exists():
        if args.draw_settings:
            settings = ["-s", args.draw_settings]
        else:
            settings = ["--clade", "--point-scale", 3]
        check_call(["map-draw", "--projection", projection, path, pdf] + settings, log_file=WORKING_DIR.joinpath("map-draw.log"))
    return pdf
    # return pdf_to_png(pdf, WORKING_DIR.joinpath(stem + ".png"), args.png_size)

# ----------------------------------------------------------------------

# def pdf_to_png(pdf, png, png_size):
#     if not png.exists():
#         if Path("/usr/bin/sips").exists():
#             check_call(["/usr/bin/sips", "-s", "format", "png", "-Z", png_size, pdf, "--out", png])
#         elif Path("/usr/bin/pdftoppm").exists():
#             check_call(["/usr/bin/pdftoppm", pdf, png.parent.joinpath(png.stem), "-png", "-f", "1", "-singlefile", "-scale-to", png_size])
#         else:
#             raise RuntimeError("don't know to to make png from pdf (neither /usr/bin/sips nor /usr/bin/pdftoppm found")
#     return png

# ----------------------------------------------------------------------

sReDates = re.compile(r"((?:19|20)\d\d[01]\d[0-3]\d)(?:\.\d+)?-((?:19|20)\d\d[01]\d[0-3]\d)")
sReProjections = re.compile(r"^Projections:\s*(\d+)")
sReMinColBasis = re.compile(r">=([^\s]+)")

def chart_info(merge):
    info = {"path": merge, "grid_results": 0}
    data = subprocess.check_output(["chart-info", str(merge)]).decode("utf-8").split("\n")
    for line in data:
        if not info.get("dates"):
            m_d = sReDates.search(line)
            if m_d:
                info["dates"] = [m_d.group(1), m_d.group(2)]
        m_p = sReProjections.match(line)
        if m_p:
            info["projections"] = int(m_p.group(1))
        elif info.get("projections") and "<grid-test" in line:
            info["grid_results"] += 1
        if info.get("projections") and not info.get("min_col_basis") and ">=" in line:
            m = sReMinColBasis.search(line)
            if m:
                info["min_col_basis"] = m.group(1)
    info["title"] = subprocess.check_output(["chart-info", "--lab", "--virus-type", "--assay", str(merge)]).decode("utf-8").strip()
    return info

# ----------------------------------------------------------------------

sIndexHtml = """<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <style>
      p {{ width: 60em; }}
      .red {{ color: red; }}
      .col-title {{ text-align: center; }}
      .space {{ min-width: 50px; }}
      object { width: 500px; height: 500px; }
    </style>
    <script>
      const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      function main() {
          document.querySelectorAll(".pdf[src]").forEach(element => {
              let src = element.getAttribute("src");
              if (isSafari)
                  element.innerHTML = `<img src="${src}">`
              else
                  element.innerHTML = `<object data="${src}#toolbar="></object>`
          });
      }
    </script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script type="module">
      import * as mod from "/js/ad/map-draw/ace-view/201807/apache-mod-acmacs.js";
      $(document).ready(() => {{
          $("div.map").each(function() {{
              try {{
                  mod.show_antigenic_map_widget({{
                      parent: $(this),
                      canvas_size: 500,
                      coloring: "default",
                      uri: this.getAttribute("name"),
                      on_data_load_failure: err => {{
                          console.error("Cannot load map from " + this.getAttribute("name"), err);
                      }}
                  }});
              }}
              catch (err) {{
                  console.error("Cannot load map from " + this.getAttribute("name"), err);
              }}
          }});
      }});
    </script>
    <title>{title}</title>
  </head>
  <body>
    <h3>{title}</h3>
    <p>
      Tables in several ranges (N most recent tables, N*2 most recent tables, etc.)
      were merges and relaxed from scratch (right part of the table), then
      grid test was run for the best maps (left part of the table).
    </p>
{grid}

    <!-- must be at the end of body -->
    <script>(function() { main(); })();</script>
  </body>
</html>
"""

def make_index_html(state, args):
    def make_cell(cell):
        if cell is None:
            return ""
        if cell == "space":
            return "<div class='space'></div>"
        return f"<div class='pdf' src='{cell.name}'></div>"
    def make_cells(row):
        return "\n".join(f"<td>{make_cell(cell)}</td>" for cell in row)
    def make_widget(cell):
        m = re.search(r"-(\d+-\d+)\.pdf$", cell.name)
        if m:
            return f"<div class='map' name='{m.group(1)}.grid.ace'></div>"
        else:
            return ""

    col_titles = "".join(f"<td>{ct}</td>" for ct in state["column_titles"])
    rows = "\n".join(f"<tr><td class='row-title'>{state['row_titles'][row_no]}</td><td>{make_widget(state['grid'][row_no][0])}</td>{make_cells(state['grid'][row_no])}</tr>" for row_no in range(len(state["row_titles"])))
    grid = f"<table>\n<tr class='col-title'><td></td><td></td>{col_titles}</tr>\n{rows}\n</table>"
    title = state['charts'][0]['title']
    if state['charts'][0].get("min_col_basis"):
        if state['charts'][0]["min_col_basis"] == "none":
            title += ", no minimum column basis"
        else:
            title += f", minimum column basis <span class='red'>{state['charts'][0]['min_col_basis']}</span>"
    html = sIndexHtml.format(title=f"{title} [{datetime.date.today().strftime('%Y-%m-%d')}]", grid=grid)
    WORKING_DIR.joinpath("index.html").open("w").write(html)

# ----------------------------------------------------------------------

def get_sets(args):
    all_tables = sorted(args.pattern)
    set_sizes = [set_size for set_size in range(args.step, len(all_tables), args.step)]
    if set_sizes[-1] < len(all_tables):
        set_sizes.append(len(all_tables))
    sets = [all_tables[-set_size:] for set_size in set_sizes]
    # pprint.pprint(sets, width=200)
    return sets

# ----------------------------------------------------------------------

def check_call(cmd, log_file=None):
    if len(cmd) < 16:
        module_logger.info(" ".join(repr(str(field)) for field in cmd))
    else:
        module_logger.info(" ".join(str(field) for field in cmd) + " ...")
    stdout = log_file.open("a") if log_file else None
    start = datetime.datetime.utcnow()
    subprocess.check_call([str(field) for field in cmd], stdout=stdout, stderr=subprocess.STDOUT)
    module_logger.info(f"{cmd[0]}: <{datetime.datetime.utcnow() - start}>")

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("--debug", action="store_const", dest="loglevel", const=logging.DEBUG, default=logging.INFO, help="Enable debugging output.")

    parser.add_argument("--step", type=int, dest="step", default=20, help="Number of tables to increment by.")
    parser.add_argument("-n", "--number-of-optimizations", type=int, dest="number_of_optimizations", default=1000)
    parser.add_argument("-d", "--number-of-dimensions", type=int, dest="number_of_dimensions", default=2)
    parser.add_argument("-m", "--minimum-column-basis", dest="minimum_column_basis", default="none")
    parser.add_argument("-k", "--projections-to-keep", type=int, dest="projections_to_keep", default=10)
    parser.add_argument("-r", "--reorient", dest="reorient_to", default=None)
    parser.add_argument("--working-dir", dest="working_dir", default=".")
    # parser.add_argument("--png-size", dest="png_size", default=500)
    parser.add_argument("--draw-settings", dest="draw_settings", default=None)

    parser.add_argument("pattern", nargs="*")

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error(f"{err}\n{traceback.format_exc()}")
    exit_code = 1
exit(exit_code)


# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
