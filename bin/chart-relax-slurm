#! /usr/bin/env python3
import sys, os, datetime, concurrent.futures, tempfile, math, socket
import subprocess
sys.path[:0] = [os.path.join(os.environ["ACMACSD_ROOT"], subdir) for subdir in ["lib", "py"]]
try:
    from acmacs_py import execute_this_script, Path
except Exception as err:
    print(sys.path, file=sys.stderr)
    raise

# ----------------------------------------------------------------------

def main(args):
    chunk_size = 100
    number_of_chunks = math.ceil(args.number_of_optimizations / chunk_size)
    with tempfile.TemporaryDirectory(prefix="slurm", dir=args.output_chart.parent) as intermediate_results_dir:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            relax_args = {
                "source": args.input_chart,
                "number_of_optimizations": chunk_size,
                "number_of_dimensions": args.number_of_dimensions,
                "minimum_column_basis": args.minimum_column_basis,
                "keep_projections": args.keep_projections,
                }
            futures = [futu for futu in (executor.submit(chart_relax, **relax_args, output=Path(intermediate_results_dir).joinpath(f"{chunk}.ace")) for chunk in range(number_of_chunks))]
            for future in concurrent.futures.as_completed(futures):
                print(future.result())

# ----------------------------------------------------------------------

def chart_relax(source, output, number_of_optimizations, number_of_dimensions, minimum_column_basis, keep_projections):
    threads = 21
    return subprocess.run(map(str, [
        "srun", "--ntasks=1", "-N1", f"--cpus-per-task={threads}",
        "chart-relax", "-n", number_of_optimizations, "-d", number_of_dimensions, "-m", minimum_column_basis, "--keep-projections", keep_projections, "--threads", threads, source, output
    ]), stdout=subprocess.PIPE, stderr=subprocess.PIPE)


# ----------------------------------------------------------------------

execute_this_script(main, {
    "-n": {"dest": "number_of_optimizations", "default": 10000},
    "-d": {"dest": "number_of_dimensions", "default": 2},
    "-m": {"dest": "minimum_column_basis", "default": "none"},
    ("-k", "--keep-projections"): {"dest": "keep_projections", "default": 10},
    "input_chart": {"type": Path},
    "output_chart": {"type": Path},
    # ("-v", "--verbose"): {"action": "store_true"},
    })

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
