#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, subprocess, csv, pprint
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)


# ======================================================================

def main(args):
    antigen_groups = {}
    serum_groups = {}
    for row in csv.reader(subprocess.check_output(["seqdb-chart-clades", "--csv", args.chart[0]]).decode("utf-8").strip().split("\n")):
        index = int(row[1])
        clades = row[3:]
        if len(clades) == 1:
            clade = clades[0]
        elif len(clades) > 1:
            clade = max(clades)
        else:
            clade = ""
        if row[0] == "AG":
            antigen_groups.setdefault(clade, []).append(index)
        else:
            serum_groups.setdefault(clade, []).append(index)
    # pprint.pprint(antigen_groups)
    # pprint.pprint(serum_groups)
    print(sorted(antigen_groups, key=lambda name: len(antigen_groups[name])))
    cmd = ["chart-html", args.chart[0], args.output[0]]
    for group in sorted(antigen_groups, key=lambda name: len(antigen_groups[name])):
        if group:
            cmd += ["--group-name", group, "--group", ",".join(str(e) for e in antigen_groups[group])]
    print(" ".join(repr(e) for e in cmd))
    subprocess.check_call(cmd)

# ----------------------------------------------------------------------

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument("chart", nargs=1)
    parser.add_argument("output", nargs=1)

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
