#! /usr/bin/env python3
import sys, os, re, subprocess, time, datetime, pprint
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)
from acmacs_base import json

# ----------------------------------------------------------------------

def main(args):
    os.chdir(args.source_dir[0])
    if args.prefix:
        pdf_dir = Path(f"pdf.{args.prefix}")
    else:
        pdf_dir = Path("pdf")
    out_dir = Path("out")
    pdf_dir.mkdir(exist_ok=True)
    groups = scan(out_dir, pdf_dir)
    make_pdfs(groups, args.prefix)
    if not args.prefix:
        make_layout_sequences(groups)
    # pprint.pprint(groups)
    make_gridage(groups, args.prefix)
    make_index_html(args.prefix)

# ----------------------------------------------------------------------

sRe_i_s_file = re.compile(r"\.([is])\.")

def scan(out_dir, pdf_dir):

    def make_group(table_no):
        table_no_s = f"{table_no:03d}"
        group = {"n": table_no}
        for fn in out_dir.glob(f"{table_no_s}.*.ace"):
            mm = sRe_i_s_file.search(fn.name)
            if mm:
                for i_s in ["i", "s"]:
                    if mm.group(1) == i_s:
                        group[i_s] = {"ace": fn, "pdf": pdf_dir.joinpath(fn.name.replace(".ace", ".pdf"))}
                if group.get("i") and group.get("s"):
                    fn_fields = group["i"]["ace"].name.split(".") # 092 i 20201002 ace
                    group["pc_i_s"] = {"pdf": pdf_dir.joinpath(f"""{table_no_s}.pc.{fn_fields[2]}.{fn_fields[1]}-vs-{group["s"]["ace"].name[4]}.pdf""")}
        return group

    return [group for group in (make_group(table_no) for table_no in range(999, 0, -1)) if len(group) > 1]

# ----------------------------------------------------------------------

def make_pdfs(groups, prefix):

    def mapi_cmd(args):
        if prefix:
            cmd = ["mapi", "-s", f"{prefix}.mapi"]
        else:
            cmd = ["mapi"]
        cmd += args
        return cmd

    for group in groups:
        for i_s in ["i", "s"]:
            if group.get(i_s) and group[i_s]["ace"].exists():
                if not group[i_s]["pdf"].exists() or group[i_s]["pdf"].stat().st_mtime < group[i_s]["ace"].stat().st_mtime:
                    print(f""">>> {group[i_s]["ace"]} pdf:{group[i_s]["pdf"].exists() and group[i_s]["pdf"].stat().st_mtime} ace:{group[i_s]["ace"].stat().st_mtime}""")
                    subprocess.check_call(mapi_cmd(["-a", "//clades,/vaccines", str(group[i_s]["ace"]), str(group[i_s]["pdf"]), "--export", str(group[i_s]["ace"])]))
                    subprocess.check_call(["touch", str(group[i_s]["pdf"])]) # make pdf more recent than exported ace
            else:
                if group.get(i_s):
                    group[i_s].pop("pdf", None)
                group.pop("pc_i_s", None)
        if group.get("pc_i_s") and (not group["pc_i_s"]["pdf"].exists() or group["pc_i_s"]["pdf"].stat().st_size < 1000 or group["pc_i_s"]["pdf"].stat().st_mtime < group["i"]["ace"].stat().st_mtime or group["pc_i_s"]["pdf"].stat().st_mtime < group["s"]["ace"].stat().st_mtime):
            print(f""">>> pc {group["pc_i_s"]["pdf"]}""")
            subprocess.check_call(mapi_cmd(["-a", "/pc", "-D", "pc-arrows-threshold=0.2", str(group["i"]["ace"]), str(group["s"]["ace"]), str(group["pc_i_s"]["pdf"])]))

# ----------------------------------------------------------------------

def make_layout_sequences(groups):
    for group in groups:
        for i_s in ["i", "s"]:
            if group.get(i_s) and group[i_s]["ace"].exists():
                lscsv = group[i_s]["pdf"].with_suffix(".layout-sequences.csv")
                if not lscsv.exists() or lscsv.stat().st_mtime < group[i_s]["ace"].stat().st_mtime:
                    print(f""">>> {group[i_s]["ace"]} ls.csv:{lscsv.exists() and lscsv.stat().st_mtime} ace:{group[i_s]["ace"].stat().st_mtime}""")
                    subprocess.check_call(["chart-layout-sequences", str(group[i_s]["ace"]), str(lscsv)])

# ----------------------------------------------------------------------

def make_gridage(groups, prefix):
    name = Path(".").resolve().parent.name
    data = {
        "!generated": f"by {sys.argv[0]}",
        "title": {
            "short": f"{name}",
            "long": f"{name}",
            "date": datetime.date.today().strftime("%Y-%m-%d")
        },
        "page": [make_grid(group) for group in groups]
    }
    if prefix:
        gridage = Path(f"gridage.{prefix}.json")
    else:
        gridage = Path("gridage.json")
    json.write(gridage, data)

# ----------------------------------------------------------------------

sReTableDate = re.compile(r"\.([\d_]{8,})")

def make_grid(group):

    def make_pdf_title(i_s):
        if i_s == "i":
            return "incremental"
        elif i_s == "s":
            return "from scratch"
        elif i_s == "pc_i_s":
            return "procrustes incremental against from scratch"
        else:
            return ""

    def make_ace_link(files):
        if files.get("ace"):
            lscsv = files["pdf"].with_suffix(".layout-sequences.csv")
            if lscsv.exists():
                lscsv_link = f"""<a download href="{lscsv}">layout-sequences.csv</a>"""
            else:
                lscsv_link = ""
            return (f"""<a target="_blank" href="{files["ace"]}?acv=html">Interactive viewer</a>"""
                    + """<span style="padding-left: 2em"></span>"""
                    + f"""<a href="{files["ace"]}">Download {files["ace"].name}</a>"""
                    + """<span style="padding-left: 2em"></span>"""
                    + lscsv_link)
        else:
            return ""

    m_table_date = sReTableDate.search((group.get("i") or group.get("s"))["ace"].name)
    if m_table_date:
        table_date = m_table_date.group(1)
    else:
        table_date = ""

    ace_file_date = time.strftime("%Y-%m-%d", time.localtime((group.get("i") or group.get("s"))["ace"].stat().st_mtime))
    return {
        "title": f"{table_date} <generated on {ace_file_date}>",
        "columns": [[
            {"T": "title", "text": make_pdf_title(i_s)},
            {"T": "text", "html": make_ace_link(group[i_s])},
            {"T": "pdf", "file": str(group[i_s]["pdf"])}
        ] for i_s in ["i", "s", "pc_i_s"] if group.get(i_s)]}

# ----------------------------------------------------------------------

def make_index_html(prefix):
    if prefix:
        gridage = Path(f"gridage.{prefix}.json")
        index_html = Path(f"index.{prefix}.html")
    else:
        gridage = Path("gridage.json")
        index_html = Path("index.html")
    if not index_html.exists():
        index_html.open("w").write(f"""<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" type="text/css" href="/js/acd/who/gridage/v1/gridage.css">
        <script src="/js/acd/who/gridage/v1/gridage.js"></script>
        <script>gridage_file = "{gridage}"</script>
    </head>
    <body>
    </body>
</html>
""")

# ----------------------------------------------------------------------

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '-v', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('-p', action='store', dest='prefix', default=None, help='mapi settings file, output pdf dir, output html prefix.')

    parser.add_argument("source_dir", nargs=1)

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Error as err:
    logging.error(str(err))
    exit_code = 1
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)
