#! /usr/bin/env python3
import sys, os, re, subprocess, time, datetime, pprint
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)
from acmacs_base import json

# ----------------------------------------------------------------------

def main():
    pdf_dir = Path("pdf")
    out_dir = Path("out")
    pdf_dir.mkdir(exist_ok=True)
    groups = scan(out_dir, pdf_dir)
    make_pdfs(groups)
    # pprint.pprint(groups)
    make_gridage(groups)
    make_index_html()

# ----------------------------------------------------------------------

sRe_i_s_file = re.compile(r"\.([is])\.")

def scan(out_dir, pdf_dir):

    def make_group(table_no):
        table_no_s = f"{table_no:03d}"
        group = {"n": table_no}
        for fn in out_dir.glob(f"{table_no_s}.*.ace"):
            mm = sRe_i_s_file.search(fn.name)
            if mm:
                for i_s in ["i", "s"]:
                    if mm.group(1) == i_s:
                        group[i_s] = {"ace": fn, "pdf": pdf_dir.joinpath(fn.name.replace(".ace", ".pdf"))}
                if group.get("i") and group.get("s"):
                    fn_fields = group["i"]["ace"].name.split(".") # 092 i 20201002 ace
                    group["pc_i_s"] = {"pdf": pdf_dir.joinpath(f"""{table_no_s}.pc.{fn_fields[2]}.{fn_fields[1]}-vs-{group["s"]["ace"].name[4]}.pdf""")}
        return group

    return [group for group in (make_group(table_no) for table_no in range(999, 0, -1)) if len(group) > 1]

# ----------------------------------------------------------------------

def make_pdfs(groups):
    for group in groups:
        for i_s in ["i", "s"]:
            if group.get(i_s) and group[i_s]["ace"].exists():
                if not group[i_s]["pdf"].exists() or group[i_s]["pdf"].stat().st_mtime < group[i_s]["ace"].stat().st_mtime:
                    print(f""">>> {group[i_s]["ace"]} pdf:{group[i_s]["pdf"].stat().st_mtime} ace:{group[i_s]["ace"].stat().st_mtime}""")
                    subprocess.check_call(["mapi", "-a", "//clades", str(group[i_s]["ace"]), str(group[i_s]["pdf"]), "--export", str(group[i_s]["ace"])])
                    subprocess.check_call(["touch", str(group[i_s]["pdf"])]) # make pdf more recent than exported ace
            else:
                if group.get(i_s):
                    group[i_s].pop("pdf", None)
                group.pop("pc_i_s", None)
        if group.get("pc_i_s") and (not group["pc_i_s"]["pdf"].exists() or group["pc_i_s"]["pdf"].stat().st_size < 1000 or group["pc_i_s"]["pdf"].stat().st_mtime < group["i"]["ace"].stat().st_mtime or group["pc_i_s"]["pdf"].stat().st_mtime < group["s"]["ace"].stat().st_mtime):
            print(f""">>> pc {group["pc_i_s"]["pdf"]}""")
            subprocess.check_call(["mapi", "-a", "/pc", "-D", "pc-arrows-threshold=0.2", str(group["i"]["ace"]), str(group["s"]["ace"]), str(group["pc_i_s"]["pdf"])])

# ----------------------------------------------------------------------

def make_gridage(groups):
    name = Path(".").resolve().parent.name
    data = {
        "!generated": f"by {sys.argv[0]}",
        "title": {
            "short": f"{name}",
            "long": f"{name}",
            "date": datetime.date.today().strftime("%Y-%m-%d")
        },
        "page": [make_grid(group) for group in groups]
    }
    json.write(Path("gridage.json"), data)

# ----------------------------------------------------------------------

sReTableDate = re.compile(r"\.([\d_]{8,})")

def make_grid(group):

    def make_pdf_title(i_s):
        if i_s == "i":
            return "incremental"
        elif i_s == "s":
            return "from scratch"
        elif i_s == "pc_i_s":
            return "procrustes incremental against from scratch"
        else:
            return ""

    def make_ace_link(files):
        if files.get("ace"):
            return f"""<a target="_blank" href="{files["ace"]}?acv=html">Interactive viewer</a><span style="padding-left: 2em"></span><a href="{files["ace"]}">Download {files["ace"].name}</a>"""
        else:
            return ""

    m_table_date = sReTableDate.search((group.get("i") or group.get("s"))["ace"].name)
    if m_table_date:
        table_date = m_table_date.group(1)
    else:
        table_date = ""

    ace_file_date = time.strftime("%Y-%m-%d", time.localtime((group.get("i") or group.get("s"))["ace"].stat().st_mtime))
    return {
        "title": f"{table_date} <generated on {ace_file_date}>",
        "columns": [[
            {"T": "title", "text": make_pdf_title(i_s)},
            {"T": "text", "html": make_ace_link(group[i_s])},
            {"T": "pdf", "file": str(group[i_s]["pdf"])}
        ] for i_s in ["i", "s", "pc_i_s"] if group.get(i_s)]}

# ----------------------------------------------------------------------

def make_index_html():
    index_html = Path("index.html")
    if not index_html.exists():
        index_html.open("w").write("""<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" type="text/css" href="/js/acd/who/gridage/v1/gridage.css">
        <script src="/js/acd/who/gridage/v1/gridage.js"></script>
    </head>
    <body>
    </body>
</html>
""")

# ----------------------------------------------------------------------

if len(sys.argv) != 2:
    print(f"""> Usage: {sys.argv[0]} /syn/eu/ac/results/chains-2020/<subtype-assay-rbc-lab>/<date>""", file=sys.stderr)
    exit(1)

os.chdir(sys.argv[1])
main()
