#! /usr/bin/env python3
# -*- Python -*-
# ======================================================================

import sys, os, socket, datetime, shutil, subprocess, pprint
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

ADMIN_EMAIL = "eu@antigenic-cartography.org"
ACMACSD_ROOT = None
ROOT_DIR = None
STATE_FILE = None
SUBTYPE = None
DATEFMT = "%Y-%m-%d %H:%M:%S"
STATE = None
EMACS_PREFIX = f"/scp:{socket.gethostname()}:"
SIGP = os.path.expandvars("${ACMACSD_ROOT}/bin/sigp")
CHART_MERGE = os.path.expandvars("${ACMACSD_ROOT}/bin/chart-merge")
CHART_RELAX_EXISTING = os.path.expandvars("${ACMACSD_ROOT}/bin/chart-relax-existing")

LABS = ["cdc", "nimr", "niid", "melb"]
ASSAYS = ["hi", "neut"]

class Error (Exception): pass

# Config: ~/AD/sources/acmacs-whocc/conf/make-signature-pages.config.json

# States:
# "export_sequences"
# "tree_init"
# "tree_update_config"
# "tree_wait"
# "draw_trees"
# "get_merges"
# "h1_overlay"
# "h1_overlay_relax"
# "draw_signature_pages"
# "report_pdf"
# "index"
# "index_common"
# "completed"

# ======================================================================

def main(args):
    global ACMACSD_ROOT, ROOT_DIR, STATE_FILE, SUBTYPE, STATE
    if socket.gethostname() != "i19":
        raise Error("The script must be run on i19")
    if not os.getenv("ACMACSD_ROOT") or not Path(os.getenv("ACMACSD_ROOT"), "data", "hidb5.h1.json.xz") or not Path(args.seqdb).expanduser().exists():
        raise Error("ACMACSD_ROOT not set or no hidb in $ACMACSD_ROOT/data")
    else:
        ACMACSD_ROOT = Path(os.getenv("ACMACSD_ROOT")).resolve()
    sys.path[1:1] = [os.getenv("ACMACSD_ROOT") + "/py"]
    SUBTYPE = args.subtype.lower()
    if SUBTYPE not in ["h1", "h3", "bv", "by"]:
        raise Error(f"Invalid subtype: {SUBTYPE}")
    ROOT_DIR = Path("/syn/eu/ac/results/signature-pages", args.tag, SUBTYPE).expanduser().resolve()
    STATE_FILE = ROOT_DIR.joinpath("state.json")
    if args.show_state:
        show_state()
        exit(0)
    print(f"{ROOT_DIR}")
    if args.daemon:
        fork()
    if not ROOT_DIR.exists() or not STATE_FILE.exists():
        initialize(args)
    STATE = load_state()
    STATE.pop("error", None)
    if args.state:
        STATE["state"] = args.state
    logging.basicConfig(filename=ROOT_DIR.joinpath("log.log"), level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s", datefmt=DATEFMT)
    run()

# ----------------------------------------------------------------------

def run():
    global STATE
    while STATE["state"] != "completed":
        current_state = STATE["state"]
        globals()["state_" + current_state]()
        save_state(STATE)
        if current_state == STATE["state"]:
            raise Error(f"state not changed from {current_state}")
    email_success()

# ======================================================================

def state_export_sequences():
    output_fas = ROOT_DIR.joinpath("source.fas")
    log_file = ROOT_DIR.joinpath("seqdb-export.log")
    cmd = [
        os.path.expandvars("${ACMACSD_ROOT}/bin/seqdb-export"),
        "--db", seqdb_file(),
        "--flu", SUBTYPE,
        "--recent", STATE["config"]["sequences"]["recent"],
        "--hamming-distance-threshold", STATE["config"]["sequences"]["hamming_distance_threshold"],
        "--tree-maker",
        "--base-seq", STATE["config"]["sequences"]["base"],
        output_fas
    ]
    module_logger.info(f"exporting fasta: {output_fas}\n  {cmd}\n  log: {log_file}")
    check_call(cmd, log_file)
    STATE["source_fasta"] = str(output_fas)
    STATE["state"] = "tree_init"

# ----------------------------------------------------------------------

def state_tree_init():
    from tree_maker import config as config_m
    module_logger.info(f"initializing tree maker config")
    config = config_m.get_default_config()
    config.update(STATE["config"]["tree_maker"][STATE["tree_maker"]])
    config["source"] = str(Path(STATE["source_fasta"]).resolve())
    STATE["tree_config"] = config
    STATE["state"] = "tree_wait"

# ----------------------------------------------------------------------

def state_tree_wait():
    from tree_maker import maker as maker_m
    if not STATE.get("tree_state"):
        STATE["tree_state"] = {"state": "init", "working_dir": str(ROOT_DIR)}
    module_logger.info(f"creating tree maker runner")
    runner = maker_m.create_runner(config=STATE["tree_config"], state=STATE["tree_state"])
    while STATE["tree_state"]["state"] != "completed":
        runner.step()
        module_logger.info(f"making tree: {STATE['tree_state']['state']}")
        save_state(STATE)
    STATE["state"] = "draw_trees"

# ----------------------------------------------------------------------

sAAAtPosThreshold = {"h1": 100, "h3": 100, "bv": 100, "by": 100}

sTreeMods = {
    "h1": [],
    "h3": [{"d1": 0.04, "mod": "hide-if-cumulative-edge-length-bigger-than"}],
    "bv": [],
    "by": []
    }

sCladeWidth = {"h1": 60, "h3": 200, "bv": 50, "by": 50}

def state_draw_trees():
    from acmacs_base import json
    log_file = ROOT_DIR.joinpath("trees.log")
    tree_file = ROOT_DIR.joinpath("tree.json.xz")
    pdfs = {k: str(ROOT_DIR.joinpath(f"{k}.pdf")) for k in ["tree", "tree-aa-at-pos"]} # , "all-hz-sections"
    check_call([SIGP, tree_file, pdfs["tree"], "--init-settings", ROOT_DIR.joinpath("tree.settings.json")], log_file)
    check_call([SIGP, tree_file, pdfs["tree-aa-at-pos"], "--init-settings", ROOT_DIR.joinpath("tree-aa-at-pos.settings.json"), "--show-aa-at-pos", "--aa-at-pos-hz-section-threshold", sAAAtPosThreshold[SUBTYPE], "--not-show-hz-sections"], log_file)

    # settings_no_aa_file = ROOT_DIR.joinpath("tree.settings-no-aa.json")
    # check_call([SIGP, tree_file, pdfs["all-hz-sections"], "-s", settings_file], log_file)

    STATE["pdfs"] = pdfs
    STATE["state"] = "get_merges"

# ----------------------------------------------------------------------

def state_get_merges():
    from acmacs_whocc.acmacs import get_recent_merges
    get_recent_merges(target_dir=ROOT_DIR, subtype=SUBTYPE)
    if SUBTYPE == "h1":
        STATE["state"] = "h1_overlay"
    else:
        STATE["state"] = "draw_signature_pages"

# ----------------------------------------------------------------------

def state_h1_overlay():
    from acmacs_whocc.h1_overlay import h1_overlay
    h1_overlay([ROOT_DIR.joinpath("cdc-h1-hi.ace"), ROOT_DIR.joinpath("melb-h1-hi.ace"), ROOT_DIR.joinpath("niid-h1-hi.ace"), ROOT_DIR.joinpath("nimr-h1-hi.ace")],
               ROOT_DIR.joinpath("all-h1-hi.overlay.ace"), log_file=ROOT_DIR.joinpath("h1-merge.log"))
    STATE["state"] = "h1_overlay_relax"

def state_h1_overlay_relax():
    from acmacs_whocc.h1_overlay import h1_relax
    h1_relax(ROOT_DIR.joinpath("all-h1-hi.overlay.ace"), ROOT_DIR.joinpath("all-h1-hi.ace"), log_file=ROOT_DIR.joinpath("h1-merge.log"))
    STATE["state"] = "draw_signature_pages"

# ----------------------------------------------------------------------

def state_draw_signature_pages():
    tree_settings_file = ROOT_DIR.joinpath("tree.settings.json")
    tree_file = ROOT_DIR.joinpath("tree.json.xz")
    log_file = ROOT_DIR.joinpath("sigp.log")
    for chart_pathname in ROOT_DIR.glob("*.ace"):
        # lab, subtype, assay = chart_pathname.stem.split("-")
        settings_file = ROOT_DIR.joinpath(f"{chart_pathname.stem}.settings.json")
        pdf = ROOT_DIR.joinpath(f"{chart_pathname.stem}.pdf")
        STATE["pdfs"][f"sigp-{chart_pathname.stem}"] = pdf
        check_call([SIGP, tree_file, pdf, "-s", tree_settings_file, "--init-settings", settings_file, "--chart", chart_pathname], log_file)
    STATE["state"] = "report_pdf"

# ----------------------------------------------------------------------

def state_report_pdf():
    # https://stackoverflow.com/questions/2507766/merge-convert-multiple-pdf-files-into-one-pdf
    log_file = ROOT_DIR.joinpath("gs.log")
    STATE["date"] = ROOT_DIR.parent.name
    pdfs = [fn for fn in (ROOT_DIR.joinpath(f"{lab}-{STATE['subtype']}-{assay}.pdf") for lab in LABS for assay in ASSAYS) if fn.exists()]
    report_pdf = ROOT_DIR.joinpath(f"signature-pages-{STATE['date'].replace('-', '')}-{STATE['subtype']}.pdf")
    check_call(["gs", "-dBATCH", "-dNOPAUSE", "-q", "-sDEVICE=pdfwrite", "-dPDFSETTINGS=/prepress", f"-sOutputFile={report_pdf}"] + pdfs, log_file)
    STATE["report_pdf"] = report_pdf.name
    STATE["state"] = "index"

def state_index():
    shutil.copy2(str(ACMACSD_ROOT.joinpath("share", "js", "who", "make-signature-pages-v1", "index.html")), str(ROOT_DIR))
    STATE["state"] = "index_common"

def state_index_common():
    # https://stackoverflow.com/questions/2507766/merge-convert-multiple-pdf-files-into-one-pdf
    log_file = ROOT_DIR.joinpath("gs.log")
    parent_dir = ROOT_DIR.parent
    report_pdf = parent_dir.joinpath(f"signature-pages-{STATE['date'].replace('-', '')}.pdf")
    subdirs = sorted((ind.parent.name for ind in parent_dir.glob("*/index.html")), key=lambda n: "A" + n if n[0] == "h" else n)
    pdfs = [fn for fn in (parent_dir.joinpath(subtype, f"{lab}-{subtype}-{assay}.pdf") for subtype in subdirs for lab in LABS for assay in ASSAYS) if fn.exists()]
    check_call(["gs", "-dBATCH", "-dNOPAUSE", "-q", "-sDEVICE=pdfwrite", "-dPDFSETTINGS=/prepress", f"-sOutputFile={report_pdf}"] + pdfs, log_file)
    state = {
        "date": STATE["date"],
        "subdirs": subdirs,
        "report_pdf": report_pdf.name,
    }
    from acmacs_base import json
    json.write(path=parent_dir.joinpath("state.json"), data=state, indent=2, compact=True)
    shutil.copy2(str(ACMACSD_ROOT.joinpath("share", "js", "who", "make-signature-pages-v1", "index.common.html")), str(parent_dir.joinpath("index.html")))
    STATE["state"] = "completed"

# ======================================================================

def fork():
    if os.fork() == 0:
        # child
        os.setsid()
        sys.stdin.close()
        sys.stdout.close()
        sys.stderr.close()
        os.close(0)
        os.close(1)
        os.close(2)
    else:
        # parent
        exit(0)

# ----------------------------------------------------------------------

def initialize(args):
    from acmacs_base import json
    ROOT_DIR.mkdir(parents=True, exist_ok=True)
    if args.seqdb:
        shutil.copyfile(str(Path(args.seqdb).expanduser()), str(seqdb_file()))
    config = json.read(Path(os.getenv("ACMACSD_ROOT"), "sources", "acmacs-whocc", "conf", "make-signature-pages.config.json"))
    state = {"state": "export_sequences", "start": datetime.datetime.now().strftime(DATEFMT), "tree_maker": args.tree_maker_speed, "subtype": SUBTYPE, "config": config[SUBTYPE]}
    save_state(state)

def show_state():
    if not ROOT_DIR.exists() or not STATE_FILE.exists():
        print("initial")
    else:
        state = load_state()
        print(state["state"])

# ----------------------------------------------------------------------

def email_error(err):
    from acmacs_base.email import send
    subject = f"FAILED: {socket.gethostname()} {sys.argv}"
    url = "https://notebooks.antigenic-cartography.org/eu/" + str(ROOT_DIR).replace("/syn/eu/ac/", "")
    url_commont = "https://notebooks.antigenic-cartography.org/eu/" + str(ROOT_DIR.parent).replace("/syn/eu/ac/", "")
    send(to=ADMIN_EMAIL, subject=subject, body=f"{subject}\n{url}\n{url_commont}\n{EMACS_PREFIX}{ROOT_DIR}\n\n{err}")

def email_success():
    from acmacs_base.email import send
    subject = f"completed: {socket.gethostname()} {sys.argv}"
    url = "https://notebooks.antigenic-cartography.org/eu/" + str(ROOT_DIR).replace("/syn/eu/ac/", "")
    url_commont = "https://notebooks.antigenic-cartography.org/eu/" + str(ROOT_DIR.parent).replace("/syn/eu/ac/", "")
    send(to=ADMIN_EMAIL, subject=subject, body=f"{subject}\n{url}\n{url_commont}\n{EMACS_PREFIX}{ROOT_DIR}")

# ----------------------------------------------------------------------

def check_call(cmd, log_file):
    module_logger.info(str(cmd))
    subprocess.check_call([str(field) for field in cmd], stdout=log_file.open("a"), stderr=subprocess.STDOUT)

def save_state(state):
    from acmacs_base import json
    try:
        json.write(path=STATE_FILE, data=state, indent=2, compact=True)
    except TypeError:
        module_logger.debug(f"STATE\n{pprint.pformat(state)}")
        raise

def load_state():
    from acmacs_base import json
    return json.read(STATE_FILE)

def seqdb_file():
    return ROOT_DIR.joinpath("seqdb.json.xz")

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    # parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
    parser.add_argument('-t', '--tag', action='store', dest='tag', required=True)
    parser.add_argument('-f', '--flu', action='store', dest='subtype', required=True)
    parser.add_argument('--seqdb', action='store', dest='seqdb', default="~/AD/data/seqdb.json.xz", help="use the specified seqdb instead of making a new one")
    parser.add_argument('-s', '--tree-maker-speed', action='store', dest='tree_maker_speed', default="week", help="\"week\", \"day\" or see ../conf/make-signature-pages.config.json")
    parser.add_argument('--no-daemon', action='store_false', dest='daemon', default=True)
    parser.add_argument('--show-state', action='store_true', dest='show_state', default=False)
    parser.add_argument('--force-state', action='store', dest='state', default=None)

    args = parser.parse_args()
    exit_code = main(args)
except Error as err:
    logging.error(str(err))
    email_error(f"{err}\n{traceback.format_exc()}")
    STATE["error"] = str(err)
    save_state(STATE)
    exit_code = 2
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    email_error(f"{err}\n{traceback.format_exc()}")
    STATE["error"] = str(err)
    save_state(STATE)
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
